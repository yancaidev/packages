indent.writeln('');
indent.writeln('#ifndef __FLUTTER__');
indent.writeln('  @implementation FlutterError');
indent.writeln('+ (instancetype)errorWithCode:(NSString*)code message:(NSString*)message details:(id)details {');
indent.writeln('  return [[FlutterError alloc] initWithCode:code message:message details:details];');
indent.writeln('}');
indent.writeln('');
indent.writeln('- (instancetype)initWithCode:(NSString*)code message:(NSString*)message details:(id)details {');
indent.writeln('  NSAssert(code, @"Code cannot be nil");');
indent.writeln('  self = [super init];');
indent.writeln('  NSAssert(self, @"Super init cannot be nil");');
indent.writeln('  _code = [code copy];');
indent.writeln('  _message = [message copy];');
indent.writeln('  _details = details;');
indent.writeln('  return self;');
indent.writeln('}');
indent.writeln('');
indent.writeln('- (BOOL)isEqual:(id)object {');
indent.writeln('  if (self == object) {');
indent.writeln('    return YES;');
indent.writeln('  }');
indent.writeln('  if (![object isKindOfClass:[FlutterError class]]) {');
indent.writeln('    return NO;');
indent.writeln('  }');
indent.writeln('  FlutterError* other = (FlutterError*)object;');
indent.writeln('  return [self.code isEqual:other.code] &&');
indent.writeln('         ((!self.message && !other.message) || [self.message isEqual:other.message]) &&');
indent.writeln('         ((!self.details && !other.details) || [self.details isEqual:other.details]);');
indent.writeln('}');
indent.writeln('');
indent.writeln('- (NSUInteger)hash {');
indent.writeln('  return [self.code hash] ^ [self.message hash] ^ [self.details hash];');
indent.writeln('}');
indent.writeln('@end');
indent.writeln('#endif');
indent.writeln('  ');
