// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#ifdef __FLUTTER__
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface Hello ()
+ (Hello *)fromList:(NSArray *)list;
+ (nullable Hello *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Hi ()
+ (Hi *)fromList:(NSArray *)list;
+ (nullable Hi *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Hb ()
+ (Hb *)fromList:(NSArray *)list;
+ (nullable Hb *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation Hello
+ (instancetype)makeWithName:(nullable NSString *)name
    deviceType:(DeviceType)deviceType
    age:(NSIntNumber *)age {
  Hello* pigeonResult = [[Hello alloc] init];
  pigeonResult.name = name;
  pigeonResult.deviceType = deviceType;
  pigeonResult.age = age;
  return pigeonResult;
}
+ (instancetype)create:(nullable NSString *)name
    deviceType:(DeviceType)deviceType
    age:(NSIntNumber *)age {
  Hello* pigeonResult = [[Hello alloc] init];
  pigeonResult.name = name;
  pigeonResult.deviceType = deviceType;
  pigeonResult.age = age;
  return pigeonResult;
}
+ (Hello *)fromList:(NSArray *)list {
  Hello *pigeonResult = [[Hello alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  pigeonResult.deviceType = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.age = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.age != nil, @"");
  return pigeonResult;
}
+ (nullable Hello *)nullableFromList:(NSArray *)list {
  return (list) ? [Hello fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
    @(self.deviceType),
    (self.age ?: [NSNull null]),
  ];
}
@end

@implementation Hi
+ (instancetype)makeWithName:(NSString *)name
    deviceType:(DeviceType)deviceType
    age:(NSIntNumber *)age {
  Hi* pigeonResult = [[Hi alloc] init];
  pigeonResult.name = name;
  pigeonResult.deviceType = deviceType;
  pigeonResult.age = age;
  return pigeonResult;
}
+ (instancetype)create:(NSString *)name
    deviceType:(DeviceType)deviceType
    age:(NSIntNumber *)age {
  Hi* pigeonResult = [[Hi alloc] init];
  pigeonResult.name = name;
  pigeonResult.deviceType = deviceType;
  pigeonResult.age = age;
  return pigeonResult;
}
+ (Hi *)fromList:(NSArray *)list {
  Hi *pigeonResult = [[Hi alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.deviceType = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.age = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.age != nil, @"");
  return pigeonResult;
}
+ (nullable Hi *)nullableFromList:(NSArray *)list {
  return (list) ? [Hi fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
    @(self.deviceType),
    (self.age ?: [NSNull null]),
  ];
}
@end

@implementation Hb
+ (instancetype)makeWith {
  Hb* pigeonResult = [[Hb alloc] init];
  return pigeonResult;
}
+ (instancetype)create {
  Hb* pigeonResult = [[Hb alloc] init];
  return pigeonResult;
}
+ (Hb *)fromList:(NSArray *)list {
  Hb *pigeonResult = [[Hb alloc] init];
  return pigeonResult;
}
+ (nullable Hb *)nullableFromList:(NSArray *)list {
  return (list) ? [Hb fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
  ];
}
@end

@interface HelloHostApiCodecReader : FlutterStandardReader
@end
@implementation HelloHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Hb fromList:[self readValue]];
    case 129: 
      return [Hello fromList:[self readValue]];
    case 130: 
      return [Hi fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface HelloHostApiCodecWriter : FlutterStandardWriter
@end
@implementation HelloHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Hb class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Hello class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Hi class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface HelloHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HelloHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HelloHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HelloHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HelloHostApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    HelloHostApiCodecReaderWriter *readerWriter = [[HelloHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void HelloHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HelloHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelloHostApi.sayHi"
        binaryMessenger:binaryMessenger
        codec:HelloHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sayHiHi:hb:error:)], @"HelloHostApi api (%@) doesn't respond to @selector(sayHiHi:hb:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        Hi *arg_hi = GetNullableObjectAtIndex(args, 0);
        Hb *arg_hb = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api sayHiHi:arg_hi hb:arg_hb error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// say hello to host api;
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelloHostApi.sayHelloToHostApi"
        binaryMessenger:binaryMessenger
        codec:HelloHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sayHelloToHostApi:deviceType:error:)], @"HelloHostApi api (%@) doesn't respond to @selector(sayHelloToHostApi:deviceType:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        Hello *arg_hello = GetNullableObjectAtIndex(args, 0);
        DeviceType arg_deviceType = [GetNullableObjectAtIndex(args, 1) integerValue];
        FlutterError *error;
        [api sayHelloToHostApi:arg_hello deviceType:arg_deviceType error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 异步做工
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelloHostApi.doWorkInSeconds"
        binaryMessenger:binaryMessenger
        codec:HelloHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(doWorkInSeconds:completion:)], @"HelloHostApi api (%@) doesn't respond to @selector(doWorkInSeconds:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSIntNumber *arg_seconds = GetNullableObjectAtIndex(args, 0);
        [api doWorkInSeconds:arg_seconds completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 异步做工
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelloHostApi.hasSalary"
        binaryMessenger:binaryMessenger
        codec:HelloHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasSalary:completion:)], @"HelloHostApi api (%@) doesn't respond to @selector(hasSalary:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSBoolNumber *arg_has = GetNullableObjectAtIndex(args, 0);
        [api hasSalary:arg_has completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface HelloFlutterApiCodecReader : FlutterStandardReader
@end
@implementation HelloFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Hello fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface HelloFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation HelloFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Hello class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface HelloFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HelloFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HelloFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HelloFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HelloFlutterApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    HelloFlutterApiCodecReaderWriter *readerWriter = [[HelloFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface HelloFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation HelloFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)sayHelloToFlutterApi:(Hello *)arg_hello completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.HelloFlutterApi.sayHelloToFlutterApi"
      binaryMessenger:self.binaryMessenger
      codec:HelloFlutterApiGetCodec()];
  [channel sendMessage:@[arg_hello ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)sayToFlutterApiHello:(Hello *)arg_hello completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.HelloFlutterApi.sayToFlutterApi"
      binaryMessenger:self.binaryMessenger
      codec:HelloFlutterApiGetCodec()];
  [channel sendMessage:@[arg_hello ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

