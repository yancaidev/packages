// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.pigeon

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class DeviceType(val raw: Int) {
  /** 未知 */
  UNKNOWN(1),
  /** iPhone */
  IPHONE(200),
  /** iPad */
  IPAD(201),
  /** iPod */
  IPOD(202),
  /** 模拟器 */
  SIMULATOR(203);

  companion object {
    fun ofRaw(raw: Int): DeviceType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Hello world!
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
class Hello (
  /** 名字 */
  var name: String? = null,
  var deviceType: DeviceType,
  var age: Long
) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Hello {
      val name = list[0] as String?
      val deviceType = DeviceType.ofRaw(list[1] as Int)!!
      val age = list[2].let { if (it is Int) it.toLong() else it as Long }
      return Hello(name, deviceType, age)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      deviceType.raw,
      age,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
class Hi (
  /** 名字 */
  var name: String,
  var deviceType: DeviceType,
  var age: Long
) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Hi {
      val name = list[0] as String
      val deviceType = DeviceType.ofRaw(list[1] as Int)!!
      val age = list[2].let { if (it is Int) it.toLong() else it as Long }
      return Hi(name, deviceType, age)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      deviceType.raw,
      age,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
class Hb (

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Hb {
      return Hb()
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object HelloHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Hb.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Hello.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Hi.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Hb -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is Hello -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is Hi -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * host 平台提供的接口
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface HelloHostApi {
  fun sayHi(hi: Hi, hb: Hb)
  /** say hello to host api; */
  fun sayHelloToHostApi(hello: Hello, deviceType: DeviceType)
  /** 异步做工 */
  fun doWorkInSeconds(seconds: Long, callback: (Result<Unit>) -> Unit)
  /** 异步做工 */
  fun hasSalary(has: Boolean, callback: (Result<Unit>) -> Unit)


companion object {
  /** The codec used by HelloHostApi. */
  val codec: MessageCodec<Any?> by lazy {
    HelloHostApiCodec
  }
  /** Sets up an instance of `HelloHostApi` to handle messages through the `binaryMessenger`. */
  @Suppress("UNCHECKED_CAST")
  fun setUp(binaryMessenger: BinaryMessenger, api: HelloHostApi?) {
    run {
      val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.HelloHostApi.sayHi", codec)
      if (api != null) {
        channel.setMessageHandler { message, reply ->
          val args = message as List<Any?>
          val hiArg = args[0] as Hi
          val hbArg = args[1] as Hb
          var wrapped: List<Any?>
          try {
            api.sayHi(hiArg, hbArg)
            wrapped = listOf<Any?>(null)
          } catch (exception: Throwable) {
            wrapped = wrapError(exception)
          }
          reply.reply(wrapped)
        }
      } else {
        channel.setMessageHandler(null)
      }
    }
    run {
      val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.HelloHostApi.sayHelloToHostApi", codec)
      if (api != null) {
        channel.setMessageHandler { message, reply ->
          val args = message as List<Any?>
          val helloArg = args[0] as Hello
          val deviceTypeArg = DeviceType.ofRaw(args[1] as Int)!!
          var wrapped: List<Any?>
          try {
            api.sayHelloToHostApi(helloArg, deviceTypeArg)
            wrapped = listOf<Any?>(null)
          } catch (exception: Throwable) {
            wrapped = wrapError(exception)
          }
          reply.reply(wrapped)
        }
      } else {
        channel.setMessageHandler(null)
      }
    }
    run {
      val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.HelloHostApi.doWorkInSeconds", codec)
      if (api != null) {
        channel.setMessageHandler { message, reply ->
          val args = message as List<Any?>
          val secondsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
          api.doWorkInSeconds(secondsArg) { result: Result<Unit> ->
            val error = result.exceptionOrNull()
            if (error != null) {
              reply.reply(wrapError(error))
            } else {
              reply.reply(wrapResult(null))
            }
          }
        }
      } else {
        channel.setMessageHandler(null)
      }
    }
    run {
      val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.HelloHostApi.hasSalary", codec)
      if (api != null) {
        channel.setMessageHandler { message, reply ->
          val args = message as List<Any?>
          val hasArg = args[0] as Boolean
          api.hasSalary(hasArg) { result: Result<Unit> ->
            val error = result.exceptionOrNull()
            if (error != null) {
              reply.reply(wrapError(error))
            } else {
              reply.reply(wrapResult(null))
            }
          }
        }
      } else {
        channel.setMessageHandler(null)
      }
    }
  }
}}
@Suppress("UNCHECKED_CAST")
private object HelloFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Hello.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Hello -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * flutter 平台提供的接口
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
@Suppress("UNCHECKED_CAST")
class HelloFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by HelloFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      HelloFlutterApiCodec
    }
  }
  /**
   * say hello to flutter api;
   * - hello 参数
   */
  fun sayHelloToFlutterApi(helloArg: Hello, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.HelloFlutterApi.sayHelloToFlutterApi", codec)
    channel.send(listOf(helloArg)) {
      callback()
    }
  }
  fun sayToFlutterApi(helloArg: Hello, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.HelloFlutterApi.sayToFlutterApi", codec)
    channel.send(listOf(helloArg)) {
      callback()
    }
  }
}
