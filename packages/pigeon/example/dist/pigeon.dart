// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum DeviceType {
  /// 未知
  unknown(raw: 1),
  /// iPhone
  iPhone(raw: 200),
  /// iPad
  iPad(raw: 201),
  /// iPod
  iPod(raw: 202),
  /// 模拟器
  simulator(raw: 203);
  const DeviceType({required this.raw});
  final int raw;
}

/// Hello world!
class Hello {
  Hello({
    required this.name,
    required this.deviceType,
  });

  /// 名字
  String name;

  DeviceType deviceType;

  Object encode() {
    return <Object?>[
      name,
      deviceType.index,
    ];
  }

  static Hello decode(Object result) {
    result as List<Object?>;
    return Hello(
      name: result[0]! as String,
      deviceType: DeviceType.values[result[1]! as int],
    );
  }
}

class _HelloHostApiCodec extends StandardMessageCodec {
  const _HelloHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Hello) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Hello.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// host 平台提供的接口
class HelloHostApi {
  /// Constructor for [HelloHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HelloHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HelloHostApiCodec();

  /// say hello to host api;
  Future<void> sayHelloToHostApi(Hello arg_hello, DeviceType arg_deviceType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HelloHostApi.sayHelloToHostApi', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_hello, arg_deviceType.raw]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 异步做工
  Future<void> doWork(int arg_duration) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HelloHostApi.doWork', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_duration]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _HelloFlutterApiCodec extends StandardMessageCodec {
  const _HelloFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Hello) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Hello.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// flutter 平台提供的接口
abstract class HelloFlutterApi {
  static const MessageCodec<Object?> codec = _HelloFlutterApiCodec();

  /// say hello to flutter api;
  /// - hello 参数
  void sayHelloToFlutterApi(Hello hello);

  static void setup(HelloFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.HelloFlutterApi.sayHelloToFlutterApi', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.HelloFlutterApi.sayHelloToFlutterApi was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Hello? arg_hello = (args[0] as Hello?);
          assert(arg_hello != null,
              'Argument for dev.flutter.pigeon.HelloFlutterApi.sayHelloToFlutterApi was null, expected non-null Hello.');
          api.sayHelloToFlutterApi(arg_hello!);
          return;
        });
      }
    }
  }
}
