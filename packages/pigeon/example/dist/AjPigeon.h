// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class CameraInfo;
@class CameraCommand;
@class SearchLanInfo;
@class GetEventsResponse;
@class Event;
@class ACDateTime;
@class ACTime;
@class PrivacyOcclusionArea;
@class Area;
@class MotionDetectArea;
@class LowPowerNotificationConfig;
@class IPCAlarmConfig;
@class GetVRAlarmConfigResp;
@class PowerInfo;
@class SettingsInfo;
@class GetTimeConfigResp;
@class CameraName;
@class SupportedAlarmType;
@class AIAlgorithmStatus;
@class AIAlgorithmArea;

/// 注意： 该代码由 pigeon 自动生成，切勿修改 ！！！
///
/// 相机基本信息
@interface CameraInfo : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithName:(nullable NSString *)name
    account:(NSString *)account
    password:(NSString *)password
    uid:(NSString *)uid;
/// 相机名称
@property(nonatomic, copy, nullable) NSString * name;
/// 相机管理账户
@property(nonatomic, copy) NSString * account;
/// 相机管理账户的密码
@property(nonatomic, copy) NSString * password;
/// 相机 uid
@property(nonatomic, copy) NSString * uid;
@end

/// 注意： 该代码由 pigeon 自动生成，切勿修改 ！！！
///
/// 相机指令数据结构
@interface CameraCommand : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithChannelId:(NSNumber *)channelId
    data:(NSArray<NSNumber *> *)data
    type:(NSNumber *)type;
/// 通道
@property(nonatomic, strong) NSNumber * channelId;
/// 指令携带数据
@property(nonatomic, strong) NSArray<NSNumber *> * data;
/// 指令类型
@property(nonatomic, strong) NSNumber * type;
@end

@interface SearchLanInfo : NSObject
+ (instancetype)makeWithUid:(nullable NSArray<NSNumber *> *)uid
    ip:(nullable NSArray<NSNumber *> *)ip
    port:(nullable NSNumber *)port;
@property(nonatomic, strong, nullable) NSArray<NSNumber *> * uid;
@property(nonatomic, strong, nullable) NSArray<NSNumber *> * ip;
@property(nonatomic, strong, nullable) NSNumber * port;
@end

/// 事件列表响应结果
///
@interface GetEventsResponse : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithChannel:(NSNumber *)channel
    total:(NSNumber *)total
    index:(NSNumber *)index
    count:(NSNumber *)count
    isAllEventsLoaded:(NSNumber *)isAllEventsLoaded
    events:(nullable NSArray<Event *> *)events;
@property(nonatomic, strong) NSNumber * channel;
@property(nonatomic, strong) NSNumber * total;
@property(nonatomic, strong) NSNumber * index;
@property(nonatomic, strong) NSNumber * count;
@property(nonatomic, strong) NSNumber * isAllEventsLoaded;
@property(nonatomic, strong, nullable) NSArray<Event *> * events;
@end

/// 相机事件
@interface Event : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithEventType:(NSNumber *)eventType
    status:(NSNumber *)status
    time:(NSNumber *)time;
@property(nonatomic, strong) NSNumber * eventType;
@property(nonatomic, strong) NSNumber * status;
@property(nonatomic, strong) NSNumber * time;
@end

@interface ACDateTime : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithYear:(NSNumber *)year
    month:(NSNumber *)month
    day:(NSNumber *)day
    time:(ACTime *)time;
@property(nonatomic, strong) NSNumber * year;
@property(nonatomic, strong) NSNumber * month;
@property(nonatomic, strong) NSNumber * day;
@property(nonatomic, strong) ACTime * time;
@end

@interface ACTime : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithHour:(NSNumber *)hour
    minute:(NSNumber *)minute
    second:(NSNumber *)second;
@property(nonatomic, strong) NSNumber * hour;
@property(nonatomic, strong) NSNumber * minute;
@property(nonatomic, strong) NSNumber * second;
@end

/// 隐私遮挡区域
/// @property x double
/// @property y double
/// @property width double
/// @property height double
/// @property color Long
/// @constructor
/// @todo 确认每个参数表达的含义
@interface PrivacyOcclusionArea : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y
    width:(NSNumber *)width
    height:(NSNumber *)height
    color:(NSNumber *)color;
@property(nonatomic, strong) NSNumber * x;
@property(nonatomic, strong) NSNumber * y;
@property(nonatomic, strong) NSNumber * width;
@property(nonatomic, strong) NSNumber * height;
@property(nonatomic, strong) NSNumber * color;
@end

/// 区域空间
/// @property x Int
/// @property y Int
/// @property width Int
/// @property height Int
/// @constructor
@interface Area : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y
    width:(NSNumber *)width
    height:(NSNumber *)height;
@property(nonatomic, strong) NSNumber * x;
@property(nonatomic, strong) NSNumber * y;
@property(nonatomic, strong) NSNumber * width;
@property(nonatomic, strong) NSNumber * height;
@end

/// 移动侦测区域数据结构
///
/// @detail data
@interface MotionDetectArea : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(NSNumber *)width
    height:(NSNumber *)height
    data:(NSArray<NSArray<NSNumber *> *> *)data;
@property(nonatomic, strong) NSNumber * width;
@property(nonatomic, strong) NSNumber * height;
@property(nonatomic, strong) NSArray<NSArray<NSNumber *> *> * data;
@end

/// 低功耗设备提醒配置信息
@interface LowPowerNotificationConfig : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIsPowerLowNotifyOn:(NSNumber *)isPowerLowNotifyOn
    triggerPercent:(NSNumber *)triggerPercent
    isSleepingNotificationOn:(NSNumber *)isSleepingNotificationOn
    neverSleep:(NSNumber *)neverSleep
    sleepTime:(NSNumber *)sleepTime
    motionPushInterval:(NSNumber *)motionPushInterval
    pirPushInterval:(NSNumber *)pirPushInterval
    isPirOn:(NSNumber *)isPirOn
    isMicOn:(NSNumber *)isMicOn
    isLedOn:(NSNumber *)isLedOn;
@property(nonatomic, strong) NSNumber * isPowerLowNotifyOn;
@property(nonatomic, strong) NSNumber * triggerPercent;
@property(nonatomic, strong) NSNumber * isSleepingNotificationOn;
@property(nonatomic, strong) NSNumber * neverSleep;
@property(nonatomic, strong) NSNumber * sleepTime;
@property(nonatomic, strong) NSNumber * motionPushInterval;
@property(nonatomic, strong) NSNumber * pirPushInterval;
@property(nonatomic, strong) NSNumber * isPirOn;
@property(nonatomic, strong) NSNumber * isMicOn;
@property(nonatomic, strong) NSNumber * isLedOn;
@end

/// IPC 告警配置信息
@interface IPCAlarmConfig : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAlarmType:(NSNumber *)alarmType
    alarmLevel:(NSNumber *)alarmLevel
    isManualAlarmOn:(NSNumber *)isManualAlarmOn
    nightLightMode:(NSNumber *)nightLightMode
    audioVolume:(NSNumber *)audioVolume;
/// 告警类型 0:人形，1: 移动侦测
@property(nonatomic, strong) NSNumber * alarmType;
/// 告警级别 0:关闭 1:大声强光 2:小声弱光 3:大声 4. 小声 5. 强光
@property(nonatomic, strong) NSNumber * alarmLevel;
/// 手动人为告警 0:关闭1:开启
@property(nonatomic, strong) NSNumber * isManualAlarmOn;
/// 夜间模式灯光 0:全彩  1:黑白  2:智能
@property(nonatomic, strong) NSNumber * nightLightMode;
/// 音量大小[-30,6]
@property(nonatomic, strong) NSNumber * audioVolume;
@end

@interface GetVRAlarmConfigResp : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCameraIndex:(NSNumber *)cameraIndex
    alarmType:(NSNumber *)alarmType
    alarmLevel:(NSNumber *)alarmLevel
    isManualAlarmOn:(NSNumber *)isManualAlarmOn
    nightLightMode:(NSNumber *)nightLightMode
    audioVolume:(NSNumber *)audioVolume
    status:(NSNumber *)status
    longLight:(NSNumber *)longLight
    supportSoundLight:(NSNumber *)supportSoundLight
    supportHuman:(NSNumber *)supportHuman
    reserved:(NSArray<NSNumber *> *)reserved;
@property(nonatomic, strong) NSNumber * cameraIndex;
/// 0为人形 1为移动    ，3是人形和移动侦测0x0f:忽略
@property(nonatomic, strong) NSNumber * alarmType;
///  0: 关闭   1：强烈声光告警   2：轻微声光告警  3: 强烈声告警4:轻微声告警5:强烈光告警  0x0f  忽略当前结构体
@property(nonatomic, strong) NSNumber * alarmLevel;
/// 人为告警0关1开
@property(nonatomic, strong) NSNumber * isManualAlarmOn;
/// 夜视模式: 0:全彩夜视 开灯 1:黑白夜视 2:智能夜视
@property(nonatomic, strong) NSNumber * nightLightMode;
/// 音量值0-100
@property(nonatomic, strong) NSNumber * audioVolume;
/// 1: succ  -1: get info fail  0: video loss
@property(nonatomic, strong) NSNumber * status;
/// 长亮
@property(nonatomic, strong) NSNumber * longLight;
/// 0 声光都不支持 1支持声的设备 2 支持光的设备 3支持声光的设备
@property(nonatomic, strong) NSNumber * supportSoundLight;
/// 0 不支持人形检测       1支持人形检测
@property(nonatomic, strong) NSNumber * supportHuman;
/// reserved[0]用作警示灯状态，1：开，2：关，0：没有这个功能
@property(nonatomic, strong) NSArray<NSNumber *> * reserved;
@end

/// @todo 待补充
@interface PowerInfo : NSObject
@end

/// @todo 待补充
@interface SettingsInfo : NSObject
@end

/// @todo 待补充
@interface GetTimeConfigResp : NSObject
@end

/// 摄像机名称
@interface CameraName : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithName:(NSNumber *)name
    cameraIndex:(NSNumber *)cameraIndex;
/// 名称
@property(nonatomic, strong) NSNumber * name;
/// 相机索引
@property(nonatomic, strong) NSNumber * cameraIndex;
@end

/// 支持的报警类型信息
@interface SupportedAlarmType : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSupportHuman:(NSNumber *)supportHuman
    supportFace:(NSNumber *)supportFace
    supportCar:(NSNumber *)supportCar
    supportPet:(NSNumber *)supportPet
    supportSoundLight:(NSNumber *)supportSoundLight;
/// 是否支持人形检测 0 不支持 1支持
@property(nonatomic, strong) NSNumber * supportHuman;
/// 是否支持人脸检测 0不支持 1支持
@property(nonatomic, strong) NSNumber * supportFace;
/// 是否支持车辆检测 0不支持 1支持
@property(nonatomic, strong) NSNumber * supportCar;
/// 是否支持宠物检测 0不支持 1支持
@property(nonatomic, strong) NSNumber * supportPet;
/// 0 声光都不支持 1支持声的设备 2 支持光的设备 3支持声光的设备
@property(nonatomic, strong) NSNumber * supportSoundLight;
@end

/// AI 算法开关状态
@interface AIAlgorithmStatus : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIsMotionOn:(NSNumber *)isMotionOn
    isHumanoidOn:(NSNumber *)isHumanoidOn
    isFaceOn:(NSNumber *)isFaceOn
    isCarOn:(NSNumber *)isCarOn
    isPetOn:(NSNumber *)isPetOn
    soundLightMode:(NSNumber *)soundLightMode;
/// 移动侦测算法状态
@property(nonatomic, strong) NSNumber * isMotionOn;
/// 人形检测算法状态
@property(nonatomic, strong) NSNumber * isHumanoidOn;
/// 人脸识别算法状态
@property(nonatomic, strong) NSNumber * isFaceOn;
/// 汽车检测算法状态
@property(nonatomic, strong) NSNumber * isCarOn;
/// 宠物检测算法状态
@property(nonatomic, strong) NSNumber * isPetOn;
/// 声光报警类型
@property(nonatomic, strong) NSNumber * soundLightMode;
@end

/// AI 算法区域
@interface AIAlgorithmArea : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y
    width:(NSNumber *)width
    height:(NSNumber *)height;
@property(nonatomic, strong) NSNumber * x;
@property(nonatomic, strong) NSNumber * y;
@property(nonatomic, strong) NSNumber * width;
@property(nonatomic, strong) NSNumber * height;
@end

#ifdef __FLUTTER__
/// The codec used by ACCore.
NSObject<FlutterMessageCodec> *ACCoreGetCodec(void);

#endif
/// 注意： 该代码由 pigeon 自动生成，切勿修改 ！！！
///
/// Ansjer Camera 核心库
///
@protocol ACCore
/// Ansjer Camera SDK 初始化
///
/// - 参数
///   - privateKey 私钥
///   - licenseKey 序列号
- (void)authorizeWithLicenceKey:(NSString *)licenseKey privateKey:(NSString *)privateKey completion:(void (^)(FlutterError *_Nullable))completion;
/// 获取 Ansjer Camera SDK 版本
///
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getSDKVersionWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

#ifdef __FLUTTER__
extern void ACCoreSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCore> *_Nullable api);

#endif
#ifdef __FLUTTER__
/// The codec used by ACCamHelper.
NSObject<FlutterMessageCodec> *ACCamHelperGetCodec(void);

#endif
/// Ansjer Camera 辅助方法
@protocol ACCamHelper
/// 搜索本地局域网内的设备
///
/// - [timeoutMs] 搜索超时时间(毫秒)
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<SearchLanInfo *> *)lanSearchTimeoutMs:(NSNumber *)timeoutMs error:(FlutterError *_Nullable *_Nonnull)error;
@end

#ifdef __FLUTTER__
extern void ACCamHelperSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCamHelper> *_Nullable api);

#endif
#ifdef __FLUTTER__
/// The codec used by ACCam.
NSObject<FlutterMessageCodec> *ACCamGetCodec(void);

#endif
///Ansjer Cammera 内置接口，包含摄像机的基本信息，以及与平台紧密相关的功能处理；
@protocol ACCam
/// 设置 uid
/// @param uid 设备 uid
- (void)setUid:(NSString *)uid error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 AP 的 ssid
- (void)setApSsid:(NSString *)ssid error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置设备管理员账户信息
/// @param account 管理员账户
/// @param password 管理员密码
- (void)setAccount:(NSString *)account password:(NSString *)password error:(FlutterError *_Nullable *_Nonnull)error;
/// 通过 uid、管理员账户、密码连接相机
- (void)connectWithError:(FlutterError *_Nullable *_Nonnull)error;
/// 通过 AP 连接相机
- (void)connectByApWithError:(FlutterError *_Nullable *_Nonnull)error;
/// 连接相机通道
/// - [channel] av 连接通道
- (void)connectChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 与相机断开连接
- (void)disconnectWithError:(FlutterError *_Nullable *_Nonnull)error;
/// 断开 av 通道
/// @param channel 通道号
- (void)disconnectChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 通过 av通道 获取视频画面，内部已做解码
/// @param channel 通道号
- (void)startReceivingVideoThroughChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 停止从 av 通道获取视频数据
/// @param channel 通道号
- (void)stopReceivingVideoThroughChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 通过 av通道 获取视频原始数据，内部未解码，需要自己解码
/// @param channel 通道号
- (void)startReceivingRawVideoThroughChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 通过 av 通道获取音频数据， 内部以解码
/// @param channel 通道号
- (void)startReceivingSoundThroughChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 停止获取音频数据
/// @param channel 通道号
- (void)stopReceivingSoundThroughChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 通过 av 通道截图，保存到本地，并控制是否保存到相册
/// @param channel 通道号
/// @param path 截图保存路径
/// @param saveToGallery 是否保存到相册
- (void)takeSnapshotThrougChannel:(NSNumber *)channel to:(NSString *)path andSaveToGallery:(NSNumber *)saveToGallery error:(FlutterError *_Nullable *_Nonnull)error;
/// 通过 av 通道录制视频
/// @param channel 通道号
/// @param limitSeconds 视频最长秒数
- (void)recordVideoThroughChannel:(NSNumber *)channel limit:(NSNumber *)limitSeconds error:(FlutterError *_Nullable *_Nonnull)error;
@end

#ifdef __FLUTTER__
extern void ACCamSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCam> *_Nullable api);

#endif
#ifdef __FLUTTER__
/// The codec used by ACCamCmd.
NSObject<FlutterMessageCodec> *ACCamCmdGetCodec(void);

#endif
/// 向摄像机/视频录像机等设备发送指令
@protocol ACCamCmd
/// 通过事件类型、状态，获取指定时间段内的事件列表
/// @param eventType 事件类型
/// @param status 事件状态
/// @param startTime 起始时间
/// @param endTime 截止时间
- (void)getEventsThroughChannel:(NSNumber *)channel withEventType:(NSNumber *)eventType status:(NSNumber *)status from:(ACDateTime *)startTime to:(ACDateTime *)endTime error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置移动侦测区域
/// @param channel Int av 通道
/// @param width Int 横向选择区域的格子数量
/// @param height Int 竖向选择区域的格子数量
/// @param bits Array<Array<Boolean>> 所有格子的选中状态，选中为 true， 否则为 false
- (void)setMotionDetectArea:(NSNumber *)channel width:(NSNumber *)width height:(NSNumber *)height bits:(NSArray<NSArray<NSNumber *> *> *)bits error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取移动侦测区域
/// @param channel Int av 通道
- (void)getMotionDetectArea:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取系统时间
/// @param channel Int av 通道
- (void)getSystemTime:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置系统时间
/// @param channel Int av 通道
/// @param time String 时间，格式：2018-6-26-10-33-26
- (void)setSystemTime:(NSString *)time byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取系统时区
/// @param channel Int av 通道
- (void)getTimeZone:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 IPC 的时区
/// @param channel Int av 通道
/// @param zone String GMT+08:00
- (void)setIpcTimeZone:(NSNumber *)zone byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 检测是否有用户正在回放视频，系统限制，同时只能有一个用户在线观看
/// @param channel Int av 通道
- (void)hasUserPlayingback:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置推送地址
/// @param channel Int av通道
/// @param url String 推送地址
- (void)setPushUrl:(NSNumber *)channel byChannel:(NSString *)url error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 九安 推送地址
/// @param channel Int av 通道
/// @param url String 不带 s 的地址
/// @param urls String 带 s 的地址
- (void)setAndonPushUrl:(NSString *)url urls:(NSString *)urls byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
///  获取低功耗相机的电量
///  @param channel Int av 通道
- (void)getPowerOfLowPowerCamera:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
///  设置云存储地址
///  @param channel Int 通道号
///  @param tokenUrl String 发送给设备，告知设备获取token的路径
///  @param postUrl String 发送给设备,告知设备文件在云端的存储路径
- (void)setCloudStorageUrlWithTokenUrl:(NSString *)tokenUrl postUrl:(NSString *)postUrl byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 关闭云存储
/// @param channel Int av 通道
- (void)turnoffCloudService:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取云存储状态
/// @param channel Int av 通道
- (void)getCloudStorageStatus:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置开通云存的摄像头
/// @todo 确认参数，
/// @param channel Int 通道号
- (void)setCloudStorageChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取调试信息
- (void)getDebugInfo:(FlutterError *_Nullable *_Nonnull)error;
/// 获取低电量提醒配置信息
/// @param channel 通道号
- (void)getLowPowerNotificationConfig:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置低电量提醒级别和开关状态
/// @param channel Int 通道号
/// @param level Int 低电量级别，0: 低于10%；1：低于25%；2：低于50%；3：低于75%。4:close;
/// @param on Boolean 低电量提醒开关, 0：关闭；1：开启
- (void)setLowPowerNotificationLevel:(NSNumber *)level on:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置休眠事件的开关状态
/// @param channel Int 通道号
/// @param time Int 时长
/// @param on Boolean 开关, 0：关闭；1：开启
- (void)setSleepingTime:(NSNumber *)time status:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 pir 开关状态
/// @param channel Int 通道号
/// @param on Boolean true: 打开 pir 提醒; false: 关闭
- (void)setPirStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 mic 开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开 mic, false 关闭
- (void)setMicStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 led 开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开 mic, false 关闭
- (void)setLedStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 控制云台
/// @param channel Int 通道号
/// @param type Int 控制指令
/// @param step Int 移动步长
- (void)controlPtzType:(NSNumber *)type step:(NSNumber *)step byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取 IPC 的调试信息
- (void)getIpcDebugInfo:(FlutterError *_Nullable *_Nonnull)error;
/// 获取室内/室外场景模式； 0: 室外模式；1：室内模式
- (void)getSceneMode:(FlutterError *_Nullable *_Nonnull)error;
/// 设置室内/室外场景模式
/// @param mode Int 0: 室外模式；1：室内模式
- (void)setSceneMode:(NSNumber *)mode byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取云台巡航模式
- (void)getPtzCruiseMode:(FlutterError *_Nullable *_Nonnull)error;
/// 设置声光报警级别
/// @param level SoundLightAlarmLevel 声光报警级别
- (void)setSoundLightAlarmLevel:(NSNumber *)level byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 ipc 的声光报警级别
/// @param level SoundLightAlarmLevel 声光报警级别
- (void)setIpcSoundLightAlarmLevel:(NSNumber *)level error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置手动报警的开关状态
/// @param channel Int 通道号
/// @param on Boolean true 开启手动报警，停止手动报警
- (void)setManualAlarmStatus:(NSNumber *)channel byChannel:(NSNumber *)on error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 IPC 手动报警的开关状态
/// @param on Boolean true 开启手动报警，停止手动报警
- (void)setIpcManualAlarmStatus:(NSNumber *)on error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置声音大小
/// @param volume Int 大小 [-30 ~ 6]
- (void)setIpcAudioVolume:(NSNumber *)volume error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 pir 警示灯开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setPirLightStatus:(NSNumber *)channel byChannel:(NSNumber *)on error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置夜视灯模式
/// @param mode Int  0-全彩，1-黑白，2-智能
- (void)setIpcNightLightMode:(NSNumber *)mode error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置夜视灯模式
/// @param channel Int 通道号
/// @param mode Int  0-全彩，1-黑白，2-智能
- (void)setNightLightMode:(NSNumber *)channel byChannel:(NSNumber *)mode error:(FlutterError *_Nullable *_Nonnull)error;
///  设置 IPC 报警类型
/// @param type Int 0：人形检测； 1：移动侦测
- (void)setIpcAlarmType:(NSNumber *)type error:(FlutterError *_Nullable *_Nonnull)error;
///  设置 IPC 报警类型
/// @param channel Int 通道号
/// @param type Int 0：人形检测； 1：移动侦测
- (void)setAlarmType:(NSNumber *)type byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取报警配置信息
- (void)getIpcAlarmConfig:(FlutterError *_Nullable *_Nonnull)error;
/// 获取报警配置信息
/// @param channel Int 通道号
- (void)getAlarmConfigByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置移动侦测报警开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setMotionAlarmStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取移动侦测、人形监测报警开关状态
/// @param channel Int 通道号
- (void)getMotionHumanoidStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置人形监测报警开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setHumanoidAlarmStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置闪光灯开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setFlickerLightStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 IPC 闪光灯报警开关状态
/// @param on Boolean true 打开， false 关闭
- (void)setIpcFlickerLightAlarmStatus:(NSNumber *)on error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置警示灯开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setWarningLightStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置红外人形监测的开关状态
/// @param channel Int
/// @param on Boolean
- (void)setPirHumanoidStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取电量信息
/// @param channel Int 通道号
- (void)getPowerInfoByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取配置信息，包含录像时长、夜视模式、录像模式、是否有 sd 卡，人形红外开关，红外灵敏度等信息。
/// 具体参照
/// @param channel Int
/// @see CameraSettingsInfo
- (void)getSettingsInfoChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取所有通道的连接状态
- (void)getAllChannelsConnectStatus:(FlutterError *_Nullable *_Nonnull)error;
/// 设置低电量提醒通知开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开，false 关闭
- (void)setLowPowerNotificationStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置时区时间
/// @param zone ZoneId 时区id
/// @param time Int 时间
- (void)setZone:(NSNumber *)zone time:(NSNumber *)time error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置夏令时
/// @todo 确认请求参数和响应
- (void)setDaylightSavingTime:(FlutterError *_Nullable *_Nonnull)error;
/// 设置时间系统
/// @param system Int 时间系统， 1： 12小时制  2：24小时制
- (void)setTimeSystem:(NSNumber *)system error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取系统时间配置信息（夏令时、12/24小时制等）
- (void)getTimeConfig:(FlutterError *_Nullable *_Nonnull)error;
/// 设置通道名称
/// @param channel Int 通道号
/// @param name String 通道名； > 注意：设备端定义的是 36 个字节，但是传递31个以上的字节时，设备端会出现问题
/// @todo 确认这里的 channel 是通道号还是 cameraIndex
- (void)setChannel:(NSNumber *)channel name:(NSString *)name error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取所有通道的名称
- (void)getAllChannelsNames:(FlutterError *_Nullable *_Nonnull)error;
/// 设置每周录制时段
/// @param channel Int 通道
/// @param hours Array<Array<Boolean>> 7 x 24 的二维数组，一周划分为7天, 每天 24 小时，录制为 true， 否则为 false
/// @param type Int 0 常规录像 1移动侦测录像 2智能报警录像
- (void)setRecordingHours:(NSNumber *)channel type:(NSArray<NSArray<NSNumber *> *> *)hours byChannel:(NSNumber *)type error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取每周的录制时段
/// @param channel Int 通道号
/// @param type Int 0 常规录像 1移动侦测录像 2智能报警录像
- (void)getRecordingHoursBytype:(NSNumber *)channel channel:(NSNumber *)type error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取单个摄像机名称
/// @param channel av通道
/// @param cameraIndex 摄相机编号
- (void)getChannelNameWithCameraIndex:(NSNumber *)cameraIndex byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置指示灯开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setIndicatorLightStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取指示灯开关状态
/// @param channel Int 通道号
- (void)getIndicatorLightStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取网络指示灯状态
/// @param channel Int 通道号
- (void)getNetworkLightStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置网络指示灯状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setNetworkLightStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置个性化语音开关状态
/// @param channel Int 通道号
/// @param on Boolean true 打开， false 关闭
- (void)setCustomVoiceStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置化语音
/// @param channel Int 通道号
/// @param voiceUrl String 个性化语音下载地址
/// @param index Int 语音索引号（暂时不知道是什么作用）
/// @param entering Boolean true 进入特定区域播放的语音，false 离开特定区域播放的语音
- (void)setCustomVoiceUrl:(NSString *)voiceUrl atIndex:(NSNumber *)index forEntering:(NSNumber *)entering byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置一周监控时段开关状态
/// @param channel Int 通道号
/// @param start DateTime 监控开始时间
/// @param end DateTime 监控结束时间
/// @param onWeekDays List<bool> 7 个 布尔值数组，代表一周内七天监控时段开关状态
- (void)setWeekMonitoringSchedule:(NSArray<NSNumber *> *)schedule from:(ACDateTime *)start to:(ACDateTime *)end byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取人形检测开关状态
/// @param channel Int 通道号
- (void)getHumanoidDetectStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置人形检测开关状态
/// @param channel Int 通道号
/// @param on Boolean true打开，false 关闭
- (void)setHumanoidDetectStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取一个月内指定时间段内有录制文件的日期列表
/// @param channel Int 通道
/// @param startTime DateTime 开始时间
/// @param endTime DateTime 结束时间
- (void)getDaysHasRecordingFilesFrom:(ACDateTime *)startTime to:(ACDateTime *)endTime byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取所有支持的报警类型
/// @param channel Int 通道号
- (void)getSupportedAlarmTypesByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置录制视频质量
/// @param quality Int 0：为高清，1：为流畅
- (void)setRecordingVideoQuality:(NSNumber *)quality error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置隐私遮挡区域及开关状态
/// @param channel Int 通道号
/// @param areas Array<PrivacyOcclusionArea> 隐私遮挡区域，最多 5 个
/// @param on Boolean true 开启隐私遮挡功能，false 关闭
- (void)setPrivacyOcclusionAreas:(NSArray<PrivacyOcclusionArea *> *)areas status:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取隐私遮挡区域及开关状态
/// @param channel Int 通道号
- (void)getPrivacyOcclusionByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置算法开关状态
/// @param channel Int 通道号
/// @param on Array<Boolean> 6个元素的数组，依次为  移动侦测 、人形、车型 、人脸 、宠物 、异响 的开关状态， true 开启
- (void)setAlgorithmsStatus:(NSArray<NSNumber *> *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取算法开关状态
/// @param channel Int 通道号
- (void)getAlgorithmsStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置算法区域
/// @param channel Int 通道号
/// @param area Area 区域
- (void)setAlgorithmArea:(Area *)area byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取算法区域
/// @param channel Int 通道号
- (void)getAlgorithmAreaByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置异响分贝级别，达到该分贝级别，触发异响报警
/// @param channel Int 通道号
/// @param decibel Int 分贝值 1: low;  2:medium; 3: high
- (void)setAbnormalDecibel:(NSNumber *)decibel byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取异响分贝级别
/// @param channel Int 通道号
- (void)getAbnormalDecibelByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
@end

#ifdef __FLUTTER__
extern void ACCamCmdSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCamCmd> *_Nullable api);

#endif
#ifdef __FLUTTER__
/// The codec used by ACCamCmdResp.
NSObject<FlutterMessageCodec> *ACCamCmdRespGetCodec(void);

#endif
/// 接收来自摄像机/视频录像机等设备的响应
///
/// 在 原生 SDK 中，以代理接口的方式告诉指令请求发送者，设备端的响应结果
///
/// 在 flutter SDK 中，通过 flutter 和 原生之间通道，告诉 flutter ，设备端的响应结果
@protocol ACCamCmdResp
/// 设置移动侦测区域响应
/// @param uid String 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetMotionDetectAreaByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取移动侦测区域响应
/// @param uid String 设备 uid
/// @param area 侦测区域
/// @param channel av通道
- (void)camera:(NSString *)uid didGetMotionDetectArea:(MotionDetectArea *)area byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取设备系统时间响应
/// @param uid 设备 uid
/// @param time 设备系统时间
/// @param success true 获取成功， false 获取失败
/// @param channel av 通道
- (void)camera:(NSString *)uid didGetSystemTime:(nullable NSString *)time success:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置设备时间系统响应
/// @param uid: 设备
/// @param success: true 设置成功， false 设置失败
/// @param channel av通道
- (void)camera:(NSString *)uid didGetSystemTimeSuccess:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取设备时区响应
/// @param uid 设备 uid
/// @param zone 时区
/// @param channel av通道
- (void)camera:(NSString *)uid didGetTimeZone:(NSNumber *)zone byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置时区响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetTimeZoneByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 查询是否有用户正在回放
/// @param uid 设备 uid
/// @param playingBack true 有人正在回放，false 没有人正在回放。
/// @param channel av通道
- (void)camera:(NSString *)uid hasUserPlayingback:(NSNumber *)playingBack byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置推送地址响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetPushUrlByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取低功耗设备电量响应
/// @param uid 设备 uid
/// @param powers: 16 个通道的电量信息，数组中的每一个元素代表一个通道的电量信息
/// @param channel av通道
- (void)camera:(NSString *)uid didGetPowerOfLowPowerCamera:(NSArray<NSNumber *> *)powers byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置云存储地址响应
/// @param uid 设备 uid
/// @param isCloudStorageOn: true 已启用云存储，false 已关闭云存储
/// @param channel av通道
- (void)camera:(NSString *)uid didSetCloudStorageUrl:(NSNumber *)isCloudStorageOn byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 关闭云存储响应
/// @param uid 设备 uid
/// @param isCloudStorageOn: true 已启用云存储，false 已关闭云存储
/// @param channel av通道
- (void)camera:(NSString *)uid didTurnOffCloudStorage:(NSNumber *)isCloudStorageOn byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取云存储状态响应
/// @param uid 设备 uid
/// @param isCloudStorageOn: true 已启用云存储，false 已关闭云存储
/// @param channel av通道
- (void)camera:(NSString *)uid didGetCloudStorageStatus:(NSNumber *)isCloudStorageOn byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取调试信息响应
/// @todo 待确认
- (void)cameraDidGetDebugInfoWithError:(FlutterError *_Nullable *_Nonnull)error;
/// 获取低功耗设备配置信息响应
/// @param uid 设备 uid
/// @param config 配置信息
/// @param success true 获取成功，false 获取失败
/// @param channel av通道
- (void)camera:(NSString *)uid didGetLowPowerNotificationConfig:(LowPowerNotificationConfig *)config success:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置低电量通知提醒级别响应
/// @param uid 设备 uid
/// @param success true 成功，false 失败
/// @param channel av通道
- (void)camera:(NSString *)uid didSetLowPowerNotificationLevelSuccess:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置休眠时间响应
/// @param uid 设备 uid
/// @param success true 成功，false 失败
/// @param channel av通道
- (void)camera:(NSString *)uid didSetSleepingTimeStatusSuccess:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 Pir 开关响应
/// @param uid 设备 uid
/// @param success true 成功，false 失败
/// @param channel av通道
- (void)camera:(NSString *)uid didSetPirStatusSuccess:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 mic 开关响应
/// @param uid 设备 uid
/// @param success true 成功，false 失败
/// @param channel av通道
- (void)camera:(NSString *)uid didSetMicStatusSuccess:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 led 开关响应
/// @param uid 设备 uid
/// @param success true 成功，false 失败
/// @param channel av通道
- (void)camera:(NSString *)uid didSetLedStatusSuccess:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 控制云台响应
/// @param uid 设备 uid
/// @param command 云台指令码
/// @param channel av通道
- (void)camera:(NSString *)uid didControlPztWithCommand:(NSNumber *)command byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// @todo 需要补充
- (void)cameraDidGetIpcDebugInfoWithError:(FlutterError *_Nullable *_Nonnull)error;
///  获取场景模式响应
/// @param uid 设备 uid
/// @param mode 环境模式，0: 室外模式；1：室内模式
/// @param channel av通道
- (void)camera:(NSString *)uid didGetSceneMode:(NSNumber *)mode byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置场景模式响应
/// @param uid 设备 uid
/// @param success true 成功， false 失败
/// @param channel av通道
- (void)camera:(NSString *)uid didSetSceneModeSuccess:(NSNumber *)success byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取云台巡航模式响应
/// @param uid 设备 uid
/// @param mode  1：自动巡航, 2：预设点巡航
/// @param channel av通道
- (void)camera:(NSString *)uid didGetPtzCruiseMode:(NSNumber *)mode byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置声光警报级别响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetSoundLightAlarmLevelByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置手动报警开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetManualAlarmStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置声音响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetAudioVolumeByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置 pir 灯 响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetPirLightStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置夜视灯光模式响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetNightLightModeByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置报警类型（人形 / 移动）响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetAlarmTypeByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// IPC 获取报警配置信息响应
/// @param uid 设备 uid
/// @param config 配置信息
/// @param channel av通道
- (void)camera:(NSString *)uid didGetIpcAlarmConfig:(IPCAlarmConfig *)conifg byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// (视频录像机)获取报警配置信息响应
/// @param uid 设备 uid
/// @param config 配置信息
/// @param channel av通道
- (void)camera:(NSString *)uid didGetAlarmConfig:(GetVRAlarmConfigResp *)conifg byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置移动侦测报警开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetMotionAlarmStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取移动侦测、人形侦测报警开关状态响应
/// @param uid 设备 uid
/// @param isMotionOn true 移动侦测报警打开，否则关闭
/// @param isHumanoidOn true 人形侦测报警打开，否则关闭
/// @param channel av通道
- (void)camera:(NSString *)uid didGetMotionStatus:(NSNumber *)isMotionOn humanoidStatus:(NSNumber *)isHumanoidOn byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置人形侦测报警开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetHunmanoidAlarmStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置闪关灯报警开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetIpcFlickerLightAlarmStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置警示灯开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetWarningLightStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置红外人形检测开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetPirHumanoidStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// @todo 待补充
- (void)cameraDidGetPowerInfoUid:(NSString *)uid info:(PowerInfo *)info channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
- (void)cameraDidGetSettingsInfoUid:(NSString *)uid info:(SettingsInfo *)info channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
- (void)cameraDidGetAllChannelsConnectStatusUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置低电量开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetLowPowerNotificationStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置时区时间响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didZoneTimeByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置夏令时响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetDayLightSavingTimeByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置时间系统回调 12 / 24 小时制 响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetTimeSystemByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取时间相关的配置信息响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didGetTimeConfig:(GetTimeConfigResp *)config byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置通道名称响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetChannelNameByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取到所有通道的名称
/// @param uid 设备 uid
/// @param names  相机名称列表
/// @param channel av通道
- (void)camera:(NSString *)uid didGetAllChannelNames:(NSArray<CameraName *> *)names byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置每周录制时段响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid setRecordingHoursByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取每周录制时段响应
/// @param uid 设备 uid
/// @param hours 表示一周划分为 7 * 24 的时段，元素为 true 时，表示该时段录制，否则不录制
/// @param type 录像类型，0 常规录像 1移动侦测录像 2智能报警录像
/// @param channel av通道
- (void)camera:(NSString *)uid didGetRecordingHours:(NSArray<NSArray<NSNumber *> *> *)hours byType:(NSNumber *)type channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取摄像头名称响应
/// @param uid 设备 uid
/// @param 摄像机名称
/// @param channel av通道
- (void)camera:(NSString *)uid didGetCameraName:(CameraName *)name byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置指示灯开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetIndicatorLightStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取指示灯开关状态响应
/// @param uid 设备 uid
/// @param on true 打开，false 关闭
/// @param channel av通道
- (void)camera:(NSString *)uid didGetIndicatorLightStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置网络指示灯开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetNetworkLightStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取网络指示灯开关状态响应
/// @param uid 设备 uid
/// @param on true 打开，false 关闭
/// @param channel av通道
- (void)camera:(NSString *)uid didGetNetworkLightStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置个性化语音开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetCustomVoiceStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置个性化语音响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetCustomVoiceByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置一周监控时段开关状态响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetWeekMonitoringScheduleByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取人形检测开关响应
/// @param uid 设备 uid
/// @param on true 打开，false 关闭
/// @param channel av通道
- (void)camera:(NSString *)uid didGetHumanoidDetectStatus:(NSNumber *)on byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置人形检测开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetHumanoidDetectStatusByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取一个月内指定时间段有录制文件的日期列表响应
/// 设置人形检测开关响应
/// @param uid 设备 uid
/// @param days 有录制文件的日期列表
/// @param channel av通道
- (void)camera:(NSString *)uid didGetDaysHasRecordingFiles:(NSArray<NSString *> *)days byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取支持的检测类型响应
/// @param uid 设备 uid
/// @param types 支持的类型
/// @param channel av通道
- (void)camera:(NSString *)uid didGetSupportedAlarmType:(SupportedAlarmType *)types byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取指定事件段内的事件列表的响应
/// @param uid 设备 uid
/// @param resp 事件列表
/// @param channel av通道
- (void)camera:(NSString *)uid DidGetEvents:(GetEventsResponse *)resp byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置录像分辨率响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetRecordingResolutionByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置隐私遮挡响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetPrivacyOcclusionByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取隐私遮挡区域响应
/// @param uid 设备 uid
/// @param area 遮挡区域
/// @param channel av通道
- (void)camera:(NSString *)uid didGetPrivacyOcclusion:(PrivacyOcclusionArea *)area byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置算法开关响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetAlgorithmStausByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取算法开关响应
/// @param uid 设备 uid
/// @param status 算法开关状态
/// @param channel av通道
- (void)camera:(NSString *)uid didGetAlgorithmStaus:(AIAlgorithmStatus *)status byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置算法区域响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetAlgorithmAreaByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取算法区域响应
/// @param uid 设备 uid
/// @param area 算法区域
/// @param channel av通道
- (void)camera:(NSString *)uid didGetAlgorithmArea:(AIAlgorithmArea *)area byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置异响级别响应
/// @param uid 设备 uid
/// @param channel av通道
- (void)camera:(NSString *)uid didSetAbnormalDecibelByChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取异响级别响应
/// @param uid 设备 uid
/// @param decibel 异响级别 1: low;  2:medium; 3: high
/// @param channel av通道
- (void)camera:(NSString *)uid didGetAbnormalDecibel:(NSNumber *)decibel byChannel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
@end

#ifdef __FLUTTER__
extern void ACCamCmdRespSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCamCmdResp> *_Nullable api);

#endif
#ifdef __FLUTTER__
/// The codec used by CameraMessage.
NSObject<FlutterMessageCodec> *CameraMessageGetCodec(void);

#endif
/// 注意： 该代码由 pigeon 自动生成，切勿修改 ！！！
///
/// 操控相机的接口
@protocol CameraMessage
/// 创建相机
/// [cameraInfo]  相机信息
- (void)createCamera:(CameraInfo *)cameraInfo error:(FlutterError *_Nullable *_Nonnull)error;
/// 连接相机
/// [cameraInfo]  相机信息
- (void)connectCamera:(NSString *)uid error:(FlutterError *_Nullable *_Nonnull)error;
/// 连接相机通道
///
/// - [uid] 相机 uid
/// - [channel] 通道号
- (void)connectChannelWithUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 断开相机连接
/// - [uid]  相机 uid
- (void)disconnectCamera:(NSString *)uid error:(FlutterError *_Nullable *_Nonnull)error;
/// 断开通道连接
- (void)disconnectChannelUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 指定相机通道 [channelId] 回传的视频画面渲染到播放器 [monitorId] 上
///
- (void)attachToMonitorMonitorId:(NSNumber *)monitorId uid:(NSString *)uid channelId:(NSNumber *)channelId error:(FlutterError *_Nullable *_Nonnull)error;
/// 相机解除播放器绑定关系
- (void)detachMonitorMonitorId:(NSNumber *)monitorId uid:(NSString *)uid error:(FlutterError *_Nullable *_Nonnull)error;
/// 请求开始出图
/// - [uid] 相机uid
/// - [channel] 通道号
/// - [isSoftwareDecode] 是否使用软解
- (void)startReceiveingVideoFramesUid:(NSString *)uid channel:(NSNumber *)channel isSoftwareDecode:(NSNumber *)isSoftwareDecode error:(FlutterError *_Nullable *_Nonnull)error;
/// 停止出图
/// - [uid] 相机 uid
/// - [channel] 通道号
- (void)stopReceivingVideoFrameUid:(NSString *)uid channel:(nullable NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 向相机发送指令
///
/// - [uid] 相机 uid
/// - [command] 指令信息
/// @see CameraCommand
- (void)sendCommandUid:(NSString *)uid command:(CameraCommand *)command error:(FlutterError *_Nullable *_Nonnull)error;
/// 对讲音频格式设置
/// - [uid] 相机 uid
/// - [channel] 通道号
/// - [audioFormat] 音频格式 (目前的格式：318)
- (void)setAudioInputCodecIdUid:(NSString *)uid channel:(NSNumber *)channel audioFormat:(NSNumber *)audioFormat error:(FlutterError *_Nullable *_Nonnull)error;
/// 开始向相机发送音频，内部会进行音频的采集、编码、发送
/// - [uid] 相机 uid
/// - [channel] 通道号
- (void)startSendingSoundToCameraUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 停止音频采集、编码、发送
///
/// - [uid] 相机 uid
/// - [channel] 通道号
- (void)stopSendingSoundToCameraUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 开始接收Device端的音频数据，内部会进行音频的接收、解码、播放
///
/// - [uid] 设备 uid
/// - [channel] 通道号
- (void)startReceivingSoundFormCameraUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 停止音频接收、解码、播放
/// - [uid] 设备 uid
/// - [channel] 通道号
- (void)stopReceivingSoundFormCameraUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 设置音频播放模式
///
/// - mode 0 外放模式，1 听筒模式(耳机模式)
- (void)setAudioPlayModeUid:(NSString *)uid mode:(NSNumber *)mode error:(FlutterError *_Nullable *_Nonnull)error;
/// 直播截图
///
/// - [uid] 相机id
/// - [channel] 通道号
/// - [targetUrl] 截图保存路径
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)takeASnapShotUid:(NSString *)uid channel:(NSNumber *)channel targetUrl:(NSString *)targetUrl error:(FlutterError *_Nullable *_Nonnull)error;
/// 录制视频
///
/// - [uid] 相机id
/// - [channel] 通道号
/// - [targetUrl] 录制的视频保存位置
/// - [durationMs] 最大录制时长，单位为 毫秒
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)startRecordingUid:(NSString *)uid channel:(NSNumber *)channel targetUrl:(NSString *)targetUrl durationMs:(NSNumber *)durationMs error:(FlutterError *_Nullable *_Nonnull)error;
/// 停止录制视频
/// - [uid] 相机id
/// - [channel] 通道号
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)stopRecordingUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
/// 获取当前音频播放模式
///
/// @return 0 外放模式，1 听筒模式(耳机模式)
/// 判断与相机是否已经建立连线
///
/// @return 是否连线
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isCameraConnectedUid:(NSString *)uid error:(FlutterError *_Nullable *_Nonnull)error;
/// 判断与相机通道是否已经建立连接
///
/// @return 是否连线
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isChannelConnectedUid:(NSString *)uid channel:(NSNumber *)channel error:(FlutterError *_Nullable *_Nonnull)error;
@end

#ifdef __FLUTTER__
extern void CameraMessageSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraMessage> *_Nullable api);

#endif
NS_ASSUME_NONNULL_END
