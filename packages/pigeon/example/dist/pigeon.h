#ifndef ACDoubleNumber
#define ACDoubleNumber NSNumber
#endif
#ifndef ACLongNumber
#define ACLongNumber NSNumber
#endif
#ifndef ACFloatNumber
#define ACFloatNumber NSNumber
#endif
#ifndef ACIntNumber
#define ACIntNumber NSNumber
#endif
#ifndef ACByteNumber
#define ACByteNumber NSNumber
#endif
#ifndef ACUInt8List 
#define ACUInt8List FlutterStandardTypedData
#endif
#ifndef ACInt32List 
#define ACInt32List FlutterStandardTypedData
#endif
#ifndef ACInt64List 
#define ACInt64List FlutterStandardTypedData
#endif
#ifndef ACFloat64List 
#define ACFloat64List FlutterStandardTypedData
#endif
// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class Hello;

/// Hello world!
@interface Hello : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithName:(NSString *)name;
/// 名字
@property(nonatomic, copy) NSString * name;
@end

#ifdef __FLUTTER__
/// The codec used by HelloHostApi.
NSObject<FlutterMessageCodec> *HelloHostApiGetCodec(void);

#endif
/// host 平台提供的接口
@protocol HelloHostApi
/// say hello to host api;
- (void)sayHelloToHostApi:(Hello *)hello f:(ACFloatNumber *)f i:(ACIntNumber *)i b:(ACByteNumber *)b d:(ACDoubleNumber *)d i2:(ACLongNumber *)i2 error:(FlutterError *_Nullable *_Nonnull)error;
/// 异步做工
- (void)doWork:(ACLongNumber *)duration completion:(void (^)(FlutterError *_Nullable))completion;
@end

#ifdef __FLUTTER__
extern void HelloHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HelloHostApi> *_Nullable api);

#endif
/// The codec used by HelloFlutterApi.
NSObject<FlutterMessageCodec> *HelloFlutterApiGetCodec(void);

/// flutter 平台提供的接口
@interface HelloFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
/// say hello to flutter api;
/// - hello 参数
- (void)sayHelloToFlutterApi:(Hello *)hello completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
