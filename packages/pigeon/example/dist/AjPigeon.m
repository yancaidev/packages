// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "AjPigeon.h"
#ifdef __FLUTTER__
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface CameraInfo ()
+ (CameraInfo *)fromList:(NSArray *)list;
+ (nullable CameraInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface CameraCommand ()
+ (CameraCommand *)fromList:(NSArray *)list;
+ (nullable CameraCommand *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SearchLanInfo ()
+ (SearchLanInfo *)fromList:(NSArray *)list;
+ (nullable SearchLanInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface GetEventsResponse ()
+ (GetEventsResponse *)fromList:(NSArray *)list;
+ (nullable GetEventsResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Event ()
+ (Event *)fromList:(NSArray *)list;
+ (nullable Event *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ACDateTime ()
+ (ACDateTime *)fromList:(NSArray *)list;
+ (nullable ACDateTime *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ACTime ()
+ (ACTime *)fromList:(NSArray *)list;
+ (nullable ACTime *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PrivacyOcclusionArea ()
+ (PrivacyOcclusionArea *)fromList:(NSArray *)list;
+ (nullable PrivacyOcclusionArea *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Area ()
+ (Area *)fromList:(NSArray *)list;
+ (nullable Area *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MotionDetectArea ()
+ (MotionDetectArea *)fromList:(NSArray *)list;
+ (nullable MotionDetectArea *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LowPowerNotificationConfig ()
+ (LowPowerNotificationConfig *)fromList:(NSArray *)list;
+ (nullable LowPowerNotificationConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface IPCAlarmConfig ()
+ (IPCAlarmConfig *)fromList:(NSArray *)list;
+ (nullable IPCAlarmConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface GetVRAlarmConfigResp ()
+ (GetVRAlarmConfigResp *)fromList:(NSArray *)list;
+ (nullable GetVRAlarmConfigResp *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PowerInfo ()
+ (PowerInfo *)fromList:(NSArray *)list;
+ (nullable PowerInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SettingsInfo ()
+ (SettingsInfo *)fromList:(NSArray *)list;
+ (nullable SettingsInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface GetTimeConfigResp ()
+ (GetTimeConfigResp *)fromList:(NSArray *)list;
+ (nullable GetTimeConfigResp *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface CameraName ()
+ (CameraName *)fromList:(NSArray *)list;
+ (nullable CameraName *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SupportedAlarmType ()
+ (SupportedAlarmType *)fromList:(NSArray *)list;
+ (nullable SupportedAlarmType *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AIAlgorithmStatus ()
+ (AIAlgorithmStatus *)fromList:(NSArray *)list;
+ (nullable AIAlgorithmStatus *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AIAlgorithmArea ()
+ (AIAlgorithmArea *)fromList:(NSArray *)list;
+ (nullable AIAlgorithmArea *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation CameraInfo
+ (instancetype)makeWithName:(nullable NSString *)name
    account:(NSString *)account
    password:(NSString *)password
    uid:(NSString *)uid {
  CameraInfo* pigeonResult = [[CameraInfo alloc] init];
  pigeonResult.name = name;
  pigeonResult.account = account;
  pigeonResult.password = password;
  pigeonResult.uid = uid;
  return pigeonResult;
}
+ (CameraInfo *)fromList:(NSArray *)list {
  CameraInfo *pigeonResult = [[CameraInfo alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  pigeonResult.account = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.account != nil, @"");
  pigeonResult.password = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.password != nil, @"");
  pigeonResult.uid = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.uid != nil, @"");
  return pigeonResult;
}
+ (nullable CameraInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [CameraInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
    (self.account ?: [NSNull null]),
    (self.password ?: [NSNull null]),
    (self.uid ?: [NSNull null]),
  ];
}
@end

@implementation CameraCommand
+ (instancetype)makeWithChannelId:(NSNumber *)channelId
    data:(NSArray<NSNumber *> *)data
    type:(NSNumber *)type {
  CameraCommand* pigeonResult = [[CameraCommand alloc] init];
  pigeonResult.channelId = channelId;
  pigeonResult.data = data;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (CameraCommand *)fromList:(NSArray *)list {
  CameraCommand *pigeonResult = [[CameraCommand alloc] init];
  pigeonResult.channelId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.channelId != nil, @"");
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.data != nil, @"");
  pigeonResult.type = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.type != nil, @"");
  return pigeonResult;
}
+ (nullable CameraCommand *)nullableFromList:(NSArray *)list {
  return (list) ? [CameraCommand fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.channelId ?: [NSNull null]),
    (self.data ?: [NSNull null]),
    (self.type ?: [NSNull null]),
  ];
}
@end

@implementation SearchLanInfo
+ (instancetype)makeWithUid:(nullable NSArray<NSNumber *> *)uid
    ip:(nullable NSArray<NSNumber *> *)ip
    port:(nullable NSNumber *)port {
  SearchLanInfo* pigeonResult = [[SearchLanInfo alloc] init];
  pigeonResult.uid = uid;
  pigeonResult.ip = ip;
  pigeonResult.port = port;
  return pigeonResult;
}
+ (SearchLanInfo *)fromList:(NSArray *)list {
  SearchLanInfo *pigeonResult = [[SearchLanInfo alloc] init];
  pigeonResult.uid = GetNullableObjectAtIndex(list, 0);
  pigeonResult.ip = GetNullableObjectAtIndex(list, 1);
  pigeonResult.port = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable SearchLanInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [SearchLanInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.uid ?: [NSNull null]),
    (self.ip ?: [NSNull null]),
    (self.port ?: [NSNull null]),
  ];
}
@end

@implementation GetEventsResponse
+ (instancetype)makeWithChannel:(NSNumber *)channel
    total:(NSNumber *)total
    index:(NSNumber *)index
    count:(NSNumber *)count
    isAllEventsLoaded:(NSNumber *)isAllEventsLoaded
    events:(nullable NSArray<Event *> *)events {
  GetEventsResponse* pigeonResult = [[GetEventsResponse alloc] init];
  pigeonResult.channel = channel;
  pigeonResult.total = total;
  pigeonResult.index = index;
  pigeonResult.count = count;
  pigeonResult.isAllEventsLoaded = isAllEventsLoaded;
  pigeonResult.events = events;
  return pigeonResult;
}
+ (GetEventsResponse *)fromList:(NSArray *)list {
  GetEventsResponse *pigeonResult = [[GetEventsResponse alloc] init];
  pigeonResult.channel = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.channel != nil, @"");
  pigeonResult.total = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.total != nil, @"");
  pigeonResult.index = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.index != nil, @"");
  pigeonResult.count = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.count != nil, @"");
  pigeonResult.isAllEventsLoaded = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.isAllEventsLoaded != nil, @"");
  pigeonResult.events = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable GetEventsResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [GetEventsResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.channel ?: [NSNull null]),
    (self.total ?: [NSNull null]),
    (self.index ?: [NSNull null]),
    (self.count ?: [NSNull null]),
    (self.isAllEventsLoaded ?: [NSNull null]),
    (self.events ?: [NSNull null]),
  ];
}
@end

@implementation Event
+ (instancetype)makeWithEventType:(NSNumber *)eventType
    status:(NSNumber *)status
    time:(NSNumber *)time {
  Event* pigeonResult = [[Event alloc] init];
  pigeonResult.eventType = eventType;
  pigeonResult.status = status;
  pigeonResult.time = time;
  return pigeonResult;
}
+ (Event *)fromList:(NSArray *)list {
  Event *pigeonResult = [[Event alloc] init];
  pigeonResult.eventType = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.eventType != nil, @"");
  pigeonResult.status = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.status != nil, @"");
  pigeonResult.time = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.time != nil, @"");
  return pigeonResult;
}
+ (nullable Event *)nullableFromList:(NSArray *)list {
  return (list) ? [Event fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.eventType ?: [NSNull null]),
    (self.status ?: [NSNull null]),
    (self.time ?: [NSNull null]),
  ];
}
@end

@implementation ACDateTime
+ (instancetype)makeWithYear:(NSNumber *)year
    month:(NSNumber *)month
    day:(NSNumber *)day
    time:(ACTime *)time {
  ACDateTime* pigeonResult = [[ACDateTime alloc] init];
  pigeonResult.year = year;
  pigeonResult.month = month;
  pigeonResult.day = day;
  pigeonResult.time = time;
  return pigeonResult;
}
+ (ACDateTime *)fromList:(NSArray *)list {
  ACDateTime *pigeonResult = [[ACDateTime alloc] init];
  pigeonResult.year = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.year != nil, @"");
  pigeonResult.month = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.month != nil, @"");
  pigeonResult.day = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.day != nil, @"");
  pigeonResult.time = [ACTime nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  NSAssert(pigeonResult.time != nil, @"");
  return pigeonResult;
}
+ (nullable ACDateTime *)nullableFromList:(NSArray *)list {
  return (list) ? [ACDateTime fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.year ?: [NSNull null]),
    (self.month ?: [NSNull null]),
    (self.day ?: [NSNull null]),
    (self.time ? [self.time toList] : [NSNull null]),
  ];
}
@end

@implementation ACTime
+ (instancetype)makeWithHour:(NSNumber *)hour
    minute:(NSNumber *)minute
    second:(NSNumber *)second {
  ACTime* pigeonResult = [[ACTime alloc] init];
  pigeonResult.hour = hour;
  pigeonResult.minute = minute;
  pigeonResult.second = second;
  return pigeonResult;
}
+ (ACTime *)fromList:(NSArray *)list {
  ACTime *pigeonResult = [[ACTime alloc] init];
  pigeonResult.hour = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.hour != nil, @"");
  pigeonResult.minute = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.minute != nil, @"");
  pigeonResult.second = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.second != nil, @"");
  return pigeonResult;
}
+ (nullable ACTime *)nullableFromList:(NSArray *)list {
  return (list) ? [ACTime fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.hour ?: [NSNull null]),
    (self.minute ?: [NSNull null]),
    (self.second ?: [NSNull null]),
  ];
}
@end

@implementation PrivacyOcclusionArea
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y
    width:(NSNumber *)width
    height:(NSNumber *)height
    color:(NSNumber *)color {
  PrivacyOcclusionArea* pigeonResult = [[PrivacyOcclusionArea alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  pigeonResult.width = width;
  pigeonResult.height = height;
  pigeonResult.color = color;
  return pigeonResult;
}
+ (PrivacyOcclusionArea *)fromList:(NSArray *)list {
  PrivacyOcclusionArea *pigeonResult = [[PrivacyOcclusionArea alloc] init];
  pigeonResult.x = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.x != nil, @"");
  pigeonResult.y = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.y != nil, @"");
  pigeonResult.width = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.width != nil, @"");
  pigeonResult.height = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.height != nil, @"");
  pigeonResult.color = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.color != nil, @"");
  return pigeonResult;
}
+ (nullable PrivacyOcclusionArea *)nullableFromList:(NSArray *)list {
  return (list) ? [PrivacyOcclusionArea fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.x ?: [NSNull null]),
    (self.y ?: [NSNull null]),
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
    (self.color ?: [NSNull null]),
  ];
}
@end

@implementation Area
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y
    width:(NSNumber *)width
    height:(NSNumber *)height {
  Area* pigeonResult = [[Area alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (Area *)fromList:(NSArray *)list {
  Area *pigeonResult = [[Area alloc] init];
  pigeonResult.x = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.x != nil, @"");
  pigeonResult.y = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.y != nil, @"");
  pigeonResult.width = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.width != nil, @"");
  pigeonResult.height = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.height != nil, @"");
  return pigeonResult;
}
+ (nullable Area *)nullableFromList:(NSArray *)list {
  return (list) ? [Area fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.x ?: [NSNull null]),
    (self.y ?: [NSNull null]),
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
  ];
}
@end

@implementation MotionDetectArea
+ (instancetype)makeWithWidth:(NSNumber *)width
    height:(NSNumber *)height
    data:(NSArray<NSArray<NSNumber *> *> *)data {
  MotionDetectArea* pigeonResult = [[MotionDetectArea alloc] init];
  pigeonResult.width = width;
  pigeonResult.height = height;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (MotionDetectArea *)fromList:(NSArray *)list {
  MotionDetectArea *pigeonResult = [[MotionDetectArea alloc] init];
  pigeonResult.width = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.width != nil, @"");
  pigeonResult.height = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.height != nil, @"");
  pigeonResult.data = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.data != nil, @"");
  return pigeonResult;
}
+ (nullable MotionDetectArea *)nullableFromList:(NSArray *)list {
  return (list) ? [MotionDetectArea fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
    (self.data ?: [NSNull null]),
  ];
}
@end

@implementation LowPowerNotificationConfig
+ (instancetype)makeWithIsPowerLowNotifyOn:(NSNumber *)isPowerLowNotifyOn
    triggerPercent:(NSNumber *)triggerPercent
    isSleepingNotificationOn:(NSNumber *)isSleepingNotificationOn
    neverSleep:(NSNumber *)neverSleep
    sleepTime:(NSNumber *)sleepTime
    motionPushInterval:(NSNumber *)motionPushInterval
    pirPushInterval:(NSNumber *)pirPushInterval
    isPirOn:(NSNumber *)isPirOn
    isMicOn:(NSNumber *)isMicOn
    isLedOn:(NSNumber *)isLedOn {
  LowPowerNotificationConfig* pigeonResult = [[LowPowerNotificationConfig alloc] init];
  pigeonResult.isPowerLowNotifyOn = isPowerLowNotifyOn;
  pigeonResult.triggerPercent = triggerPercent;
  pigeonResult.isSleepingNotificationOn = isSleepingNotificationOn;
  pigeonResult.neverSleep = neverSleep;
  pigeonResult.sleepTime = sleepTime;
  pigeonResult.motionPushInterval = motionPushInterval;
  pigeonResult.pirPushInterval = pirPushInterval;
  pigeonResult.isPirOn = isPirOn;
  pigeonResult.isMicOn = isMicOn;
  pigeonResult.isLedOn = isLedOn;
  return pigeonResult;
}
+ (LowPowerNotificationConfig *)fromList:(NSArray *)list {
  LowPowerNotificationConfig *pigeonResult = [[LowPowerNotificationConfig alloc] init];
  pigeonResult.isPowerLowNotifyOn = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.isPowerLowNotifyOn != nil, @"");
  pigeonResult.triggerPercent = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.triggerPercent != nil, @"");
  pigeonResult.isSleepingNotificationOn = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.isSleepingNotificationOn != nil, @"");
  pigeonResult.neverSleep = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.neverSleep != nil, @"");
  pigeonResult.sleepTime = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.sleepTime != nil, @"");
  pigeonResult.motionPushInterval = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.motionPushInterval != nil, @"");
  pigeonResult.pirPushInterval = GetNullableObjectAtIndex(list, 6);
  NSAssert(pigeonResult.pirPushInterval != nil, @"");
  pigeonResult.isPirOn = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.isPirOn != nil, @"");
  pigeonResult.isMicOn = GetNullableObjectAtIndex(list, 8);
  NSAssert(pigeonResult.isMicOn != nil, @"");
  pigeonResult.isLedOn = GetNullableObjectAtIndex(list, 9);
  NSAssert(pigeonResult.isLedOn != nil, @"");
  return pigeonResult;
}
+ (nullable LowPowerNotificationConfig *)nullableFromList:(NSArray *)list {
  return (list) ? [LowPowerNotificationConfig fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.isPowerLowNotifyOn ?: [NSNull null]),
    (self.triggerPercent ?: [NSNull null]),
    (self.isSleepingNotificationOn ?: [NSNull null]),
    (self.neverSleep ?: [NSNull null]),
    (self.sleepTime ?: [NSNull null]),
    (self.motionPushInterval ?: [NSNull null]),
    (self.pirPushInterval ?: [NSNull null]),
    (self.isPirOn ?: [NSNull null]),
    (self.isMicOn ?: [NSNull null]),
    (self.isLedOn ?: [NSNull null]),
  ];
}
@end

@implementation IPCAlarmConfig
+ (instancetype)makeWithAlarmType:(NSNumber *)alarmType
    alarmLevel:(NSNumber *)alarmLevel
    isManualAlarmOn:(NSNumber *)isManualAlarmOn
    nightLightMode:(NSNumber *)nightLightMode
    audioVolume:(NSNumber *)audioVolume {
  IPCAlarmConfig* pigeonResult = [[IPCAlarmConfig alloc] init];
  pigeonResult.alarmType = alarmType;
  pigeonResult.alarmLevel = alarmLevel;
  pigeonResult.isManualAlarmOn = isManualAlarmOn;
  pigeonResult.nightLightMode = nightLightMode;
  pigeonResult.audioVolume = audioVolume;
  return pigeonResult;
}
+ (IPCAlarmConfig *)fromList:(NSArray *)list {
  IPCAlarmConfig *pigeonResult = [[IPCAlarmConfig alloc] init];
  pigeonResult.alarmType = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.alarmType != nil, @"");
  pigeonResult.alarmLevel = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.alarmLevel != nil, @"");
  pigeonResult.isManualAlarmOn = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.isManualAlarmOn != nil, @"");
  pigeonResult.nightLightMode = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.nightLightMode != nil, @"");
  pigeonResult.audioVolume = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.audioVolume != nil, @"");
  return pigeonResult;
}
+ (nullable IPCAlarmConfig *)nullableFromList:(NSArray *)list {
  return (list) ? [IPCAlarmConfig fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.alarmType ?: [NSNull null]),
    (self.alarmLevel ?: [NSNull null]),
    (self.isManualAlarmOn ?: [NSNull null]),
    (self.nightLightMode ?: [NSNull null]),
    (self.audioVolume ?: [NSNull null]),
  ];
}
@end

@implementation GetVRAlarmConfigResp
+ (instancetype)makeWithCameraIndex:(NSNumber *)cameraIndex
    alarmType:(NSNumber *)alarmType
    alarmLevel:(NSNumber *)alarmLevel
    isManualAlarmOn:(NSNumber *)isManualAlarmOn
    nightLightMode:(NSNumber *)nightLightMode
    audioVolume:(NSNumber *)audioVolume
    status:(NSNumber *)status
    longLight:(NSNumber *)longLight
    supportSoundLight:(NSNumber *)supportSoundLight
    supportHuman:(NSNumber *)supportHuman
    reserved:(NSArray<NSNumber *> *)reserved {
  GetVRAlarmConfigResp* pigeonResult = [[GetVRAlarmConfigResp alloc] init];
  pigeonResult.cameraIndex = cameraIndex;
  pigeonResult.alarmType = alarmType;
  pigeonResult.alarmLevel = alarmLevel;
  pigeonResult.isManualAlarmOn = isManualAlarmOn;
  pigeonResult.nightLightMode = nightLightMode;
  pigeonResult.audioVolume = audioVolume;
  pigeonResult.status = status;
  pigeonResult.longLight = longLight;
  pigeonResult.supportSoundLight = supportSoundLight;
  pigeonResult.supportHuman = supportHuman;
  pigeonResult.reserved = reserved;
  return pigeonResult;
}
+ (GetVRAlarmConfigResp *)fromList:(NSArray *)list {
  GetVRAlarmConfigResp *pigeonResult = [[GetVRAlarmConfigResp alloc] init];
  pigeonResult.cameraIndex = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.cameraIndex != nil, @"");
  pigeonResult.alarmType = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.alarmType != nil, @"");
  pigeonResult.alarmLevel = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.alarmLevel != nil, @"");
  pigeonResult.isManualAlarmOn = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.isManualAlarmOn != nil, @"");
  pigeonResult.nightLightMode = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.nightLightMode != nil, @"");
  pigeonResult.audioVolume = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.audioVolume != nil, @"");
  pigeonResult.status = GetNullableObjectAtIndex(list, 6);
  NSAssert(pigeonResult.status != nil, @"");
  pigeonResult.longLight = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.longLight != nil, @"");
  pigeonResult.supportSoundLight = GetNullableObjectAtIndex(list, 8);
  NSAssert(pigeonResult.supportSoundLight != nil, @"");
  pigeonResult.supportHuman = GetNullableObjectAtIndex(list, 9);
  NSAssert(pigeonResult.supportHuman != nil, @"");
  pigeonResult.reserved = GetNullableObjectAtIndex(list, 10);
  NSAssert(pigeonResult.reserved != nil, @"");
  return pigeonResult;
}
+ (nullable GetVRAlarmConfigResp *)nullableFromList:(NSArray *)list {
  return (list) ? [GetVRAlarmConfigResp fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.cameraIndex ?: [NSNull null]),
    (self.alarmType ?: [NSNull null]),
    (self.alarmLevel ?: [NSNull null]),
    (self.isManualAlarmOn ?: [NSNull null]),
    (self.nightLightMode ?: [NSNull null]),
    (self.audioVolume ?: [NSNull null]),
    (self.status ?: [NSNull null]),
    (self.longLight ?: [NSNull null]),
    (self.supportSoundLight ?: [NSNull null]),
    (self.supportHuman ?: [NSNull null]),
    (self.reserved ?: [NSNull null]),
  ];
}
@end

@implementation PowerInfo
+ (instancetype)makeWith {
  PowerInfo* pigeonResult = [[PowerInfo alloc] init];
  return pigeonResult;
}
+ (PowerInfo *)fromList:(NSArray *)list {
  PowerInfo *pigeonResult = [[PowerInfo alloc] init];
  return pigeonResult;
}
+ (nullable PowerInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [PowerInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
  ];
}
@end

@implementation SettingsInfo
+ (instancetype)makeWith {
  SettingsInfo* pigeonResult = [[SettingsInfo alloc] init];
  return pigeonResult;
}
+ (SettingsInfo *)fromList:(NSArray *)list {
  SettingsInfo *pigeonResult = [[SettingsInfo alloc] init];
  return pigeonResult;
}
+ (nullable SettingsInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [SettingsInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
  ];
}
@end

@implementation GetTimeConfigResp
+ (instancetype)makeWith {
  GetTimeConfigResp* pigeonResult = [[GetTimeConfigResp alloc] init];
  return pigeonResult;
}
+ (GetTimeConfigResp *)fromList:(NSArray *)list {
  GetTimeConfigResp *pigeonResult = [[GetTimeConfigResp alloc] init];
  return pigeonResult;
}
+ (nullable GetTimeConfigResp *)nullableFromList:(NSArray *)list {
  return (list) ? [GetTimeConfigResp fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
  ];
}
@end

@implementation CameraName
+ (instancetype)makeWithName:(NSNumber *)name
    cameraIndex:(NSNumber *)cameraIndex {
  CameraName* pigeonResult = [[CameraName alloc] init];
  pigeonResult.name = name;
  pigeonResult.cameraIndex = cameraIndex;
  return pigeonResult;
}
+ (CameraName *)fromList:(NSArray *)list {
  CameraName *pigeonResult = [[CameraName alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.cameraIndex = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.cameraIndex != nil, @"");
  return pigeonResult;
}
+ (nullable CameraName *)nullableFromList:(NSArray *)list {
  return (list) ? [CameraName fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
    (self.cameraIndex ?: [NSNull null]),
  ];
}
@end

@implementation SupportedAlarmType
+ (instancetype)makeWithSupportHuman:(NSNumber *)supportHuman
    supportFace:(NSNumber *)supportFace
    supportCar:(NSNumber *)supportCar
    supportPet:(NSNumber *)supportPet
    supportSoundLight:(NSNumber *)supportSoundLight {
  SupportedAlarmType* pigeonResult = [[SupportedAlarmType alloc] init];
  pigeonResult.supportHuman = supportHuman;
  pigeonResult.supportFace = supportFace;
  pigeonResult.supportCar = supportCar;
  pigeonResult.supportPet = supportPet;
  pigeonResult.supportSoundLight = supportSoundLight;
  return pigeonResult;
}
+ (SupportedAlarmType *)fromList:(NSArray *)list {
  SupportedAlarmType *pigeonResult = [[SupportedAlarmType alloc] init];
  pigeonResult.supportHuman = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.supportHuman != nil, @"");
  pigeonResult.supportFace = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.supportFace != nil, @"");
  pigeonResult.supportCar = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.supportCar != nil, @"");
  pigeonResult.supportPet = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.supportPet != nil, @"");
  pigeonResult.supportSoundLight = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.supportSoundLight != nil, @"");
  return pigeonResult;
}
+ (nullable SupportedAlarmType *)nullableFromList:(NSArray *)list {
  return (list) ? [SupportedAlarmType fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.supportHuman ?: [NSNull null]),
    (self.supportFace ?: [NSNull null]),
    (self.supportCar ?: [NSNull null]),
    (self.supportPet ?: [NSNull null]),
    (self.supportSoundLight ?: [NSNull null]),
  ];
}
@end

@implementation AIAlgorithmStatus
+ (instancetype)makeWithIsMotionOn:(NSNumber *)isMotionOn
    isHumanoidOn:(NSNumber *)isHumanoidOn
    isFaceOn:(NSNumber *)isFaceOn
    isCarOn:(NSNumber *)isCarOn
    isPetOn:(NSNumber *)isPetOn
    soundLightMode:(NSNumber *)soundLightMode {
  AIAlgorithmStatus* pigeonResult = [[AIAlgorithmStatus alloc] init];
  pigeonResult.isMotionOn = isMotionOn;
  pigeonResult.isHumanoidOn = isHumanoidOn;
  pigeonResult.isFaceOn = isFaceOn;
  pigeonResult.isCarOn = isCarOn;
  pigeonResult.isPetOn = isPetOn;
  pigeonResult.soundLightMode = soundLightMode;
  return pigeonResult;
}
+ (AIAlgorithmStatus *)fromList:(NSArray *)list {
  AIAlgorithmStatus *pigeonResult = [[AIAlgorithmStatus alloc] init];
  pigeonResult.isMotionOn = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.isMotionOn != nil, @"");
  pigeonResult.isHumanoidOn = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.isHumanoidOn != nil, @"");
  pigeonResult.isFaceOn = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.isFaceOn != nil, @"");
  pigeonResult.isCarOn = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.isCarOn != nil, @"");
  pigeonResult.isPetOn = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.isPetOn != nil, @"");
  pigeonResult.soundLightMode = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.soundLightMode != nil, @"");
  return pigeonResult;
}
+ (nullable AIAlgorithmStatus *)nullableFromList:(NSArray *)list {
  return (list) ? [AIAlgorithmStatus fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.isMotionOn ?: [NSNull null]),
    (self.isHumanoidOn ?: [NSNull null]),
    (self.isFaceOn ?: [NSNull null]),
    (self.isCarOn ?: [NSNull null]),
    (self.isPetOn ?: [NSNull null]),
    (self.soundLightMode ?: [NSNull null]),
  ];
}
@end

@implementation AIAlgorithmArea
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y
    width:(NSNumber *)width
    height:(NSNumber *)height {
  AIAlgorithmArea* pigeonResult = [[AIAlgorithmArea alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (AIAlgorithmArea *)fromList:(NSArray *)list {
  AIAlgorithmArea *pigeonResult = [[AIAlgorithmArea alloc] init];
  pigeonResult.x = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.x != nil, @"");
  pigeonResult.y = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.y != nil, @"");
  pigeonResult.width = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.width != nil, @"");
  pigeonResult.height = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.height != nil, @"");
  return pigeonResult;
}
+ (nullable AIAlgorithmArea *)nullableFromList:(NSArray *)list {
  return (list) ? [AIAlgorithmArea fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.x ?: [NSNull null]),
    (self.y ?: [NSNull null]),
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
  ];
}
@end

NSObject<FlutterMessageCodec> *ACCoreGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void ACCoreSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCore> *api) {
  /// Ansjer Camera SDK 初始化
  ///
  /// - 参数
  ///   - privateKey 私钥
  ///   - licenseKey 序列号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCore.authorizeWithLicenceKey"
        binaryMessenger:binaryMessenger
        codec:ACCoreGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(authorizeWithLicenceKey:privateKey:completion:)], @"ACCore api (%@) doesn't respond to @selector(authorizeWithLicenceKey:privateKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_licenseKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_privateKey = GetNullableObjectAtIndex(args, 1);
        [api authorizeWithLicenceKey:arg_licenseKey privateKey:arg_privateKey completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取 Ansjer Camera SDK 版本
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCore.getSDKVersion"
        binaryMessenger:binaryMessenger
        codec:ACCoreGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSDKVersionWithError:)], @"ACCore api (%@) doesn't respond to @selector(getSDKVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getSDKVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ACCamHelperCodecReader : FlutterStandardReader
@end
@implementation ACCamHelperCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [SearchLanInfo fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ACCamHelperCodecWriter : FlutterStandardWriter
@end
@implementation ACCamHelperCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[SearchLanInfo class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ACCamHelperCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ACCamHelperCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ACCamHelperCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ACCamHelperCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ACCamHelperGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ACCamHelperCodecReaderWriter *readerWriter = [[ACCamHelperCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ACCamHelperSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCamHelper> *api) {
  /// 搜索本地局域网内的设备
  ///
  /// - [timeoutMs] 搜索超时时间(毫秒)
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamHelper.lanSearch"
        binaryMessenger:binaryMessenger
        codec:ACCamHelperGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(lanSearchTimeoutMs:error:)], @"ACCamHelper api (%@) doesn't respond to @selector(lanSearchTimeoutMs:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_timeoutMs = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<SearchLanInfo *> *output = [api lanSearchTimeoutMs:arg_timeoutMs error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *ACCamGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void ACCamSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCam> *api) {
  /// 设置 uid
  /// @param uid 设备 uid
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.setUid"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUid:error:)], @"ACCam api (%@) doesn't respond to @selector(setUid:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setUid:arg_uid error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 AP 的 ssid
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.setApSsid"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setApSsid:error:)], @"ACCam api (%@) doesn't respond to @selector(setApSsid:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_ssid = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setApSsid:arg_ssid error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置设备管理员账户信息
  /// @param account 管理员账户
  /// @param password 管理员密码
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.setAccount"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAccount:password:error:)], @"ACCam api (%@) doesn't respond to @selector(setAccount:password:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_account = GetNullableObjectAtIndex(args, 0);
        NSString *arg_password = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setAccount:arg_account password:arg_password error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 通过 uid、管理员账户、密码连接相机
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.connect"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectWithError:)], @"ACCam api (%@) doesn't respond to @selector(connectWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api connectWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 通过 AP 连接相机
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.connectByAp"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectByApWithError:)], @"ACCam api (%@) doesn't respond to @selector(connectByApWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api connectByApWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 连接相机通道
  /// - [channel] av 连接通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.connectChannel"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectChannel:error:)], @"ACCam api (%@) doesn't respond to @selector(connectChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api connectChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 与相机断开连接
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.disconnect"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectWithError:)], @"ACCam api (%@) doesn't respond to @selector(disconnectWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api disconnectWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 断开 av 通道
  /// @param channel 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.disconnectChannel"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectChannel:error:)], @"ACCam api (%@) doesn't respond to @selector(disconnectChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disconnectChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 通过 av通道 获取视频画面，内部已做解码
  /// @param channel 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.startReceivingVideo"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startReceivingVideoThroughChannel:error:)], @"ACCam api (%@) doesn't respond to @selector(startReceivingVideoThroughChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startReceivingVideoThroughChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止从 av 通道获取视频数据
  /// @param channel 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.stopReceivingVideo"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopReceivingVideoThroughChannel:error:)], @"ACCam api (%@) doesn't respond to @selector(stopReceivingVideoThroughChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api stopReceivingVideoThroughChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 通过 av通道 获取视频原始数据，内部未解码，需要自己解码
  /// @param channel 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.startReceivingRawVideo"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startReceivingRawVideoThroughChannel:error:)], @"ACCam api (%@) doesn't respond to @selector(startReceivingRawVideoThroughChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startReceivingRawVideoThroughChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 通过 av 通道获取音频数据， 内部以解码
  /// @param channel 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.startReceivingSound"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startReceivingSoundThroughChannel:error:)], @"ACCam api (%@) doesn't respond to @selector(startReceivingSoundThroughChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startReceivingSoundThroughChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止获取音频数据
  /// @param channel 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.stopReceivingSound"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopReceivingSoundThroughChannel:error:)], @"ACCam api (%@) doesn't respond to @selector(stopReceivingSoundThroughChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api stopReceivingSoundThroughChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 通过 av 通道截图，保存到本地，并控制是否保存到相册
  /// @param channel 通道号
  /// @param path 截图保存路径
  /// @param saveToGallery 是否保存到相册
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.takeSnapshot"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(takeSnapshotThrougChannel:to:andSaveToGallery:error:)], @"ACCam api (%@) doesn't respond to @selector(takeSnapshotThrougChannel:to:andSaveToGallery:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSString *arg_path = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_saveToGallery = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api takeSnapshotThrougChannel:arg_channel to:arg_path andSaveToGallery:arg_saveToGallery error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 通过 av 通道录制视频
  /// @param channel 通道号
  /// @param limitSeconds 视频最长秒数
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCam.recordVideo"
        binaryMessenger:binaryMessenger
        codec:ACCamGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recordVideoThroughChannel:limit:error:)], @"ACCam api (%@) doesn't respond to @selector(recordVideoThroughChannel:limit:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_limitSeconds = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api recordVideoThroughChannel:arg_channel limit:arg_limitSeconds error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ACCamCmdCodecReader : FlutterStandardReader
@end
@implementation ACCamCmdCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [ACDateTime fromList:[self readValue]];
    case 129: 
      return [ACTime fromList:[self readValue]];
    case 130: 
      return [Area fromList:[self readValue]];
    case 131: 
      return [PrivacyOcclusionArea fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ACCamCmdCodecWriter : FlutterStandardWriter
@end
@implementation ACCamCmdCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ACDateTime class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ACTime class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Area class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PrivacyOcclusionArea class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ACCamCmdCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ACCamCmdCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ACCamCmdCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ACCamCmdCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ACCamCmdGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ACCamCmdCodecReaderWriter *readerWriter = [[ACCamCmdCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ACCamCmdSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCamCmd> *api) {
  /// 通过事件类型、状态，获取指定时间段内的事件列表
  /// @param eventType 事件类型
  /// @param status 事件状态
  /// @param startTime 起始时间
  /// @param endTime 截止时间
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getEvents"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getEventsThroughChannel:withEventType:status:from:to:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getEventsThroughChannel:withEventType:status:from:to:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_eventType = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_status = GetNullableObjectAtIndex(args, 2);
        ACDateTime *arg_startTime = GetNullableObjectAtIndex(args, 3);
        ACDateTime *arg_endTime = GetNullableObjectAtIndex(args, 4);
        FlutterError *error;
        [api getEventsThroughChannel:arg_channel withEventType:arg_eventType status:arg_status from:arg_startTime to:arg_endTime error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置移动侦测区域
  /// @param channel Int av 通道
  /// @param width Int 横向选择区域的格子数量
  /// @param height Int 竖向选择区域的格子数量
  /// @param bits Array<Array<Boolean>> 所有格子的选中状态，选中为 true， 否则为 false
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setMotionDetectArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMotionDetectArea:width:height:bits:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setMotionDetectArea:width:height:bits:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_width = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_height = GetNullableObjectAtIndex(args, 2);
        NSArray<NSArray<NSNumber *> *> *arg_bits = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api setMotionDetectArea:arg_channel width:arg_width height:arg_height bits:arg_bits error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取移动侦测区域
  /// @param channel Int av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getMotionDetectArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMotionDetectArea:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getMotionDetectArea:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getMotionDetectArea:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取系统时间
  /// @param channel Int av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getSystemTime"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSystemTime:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getSystemTime:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getSystemTime:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置系统时间
  /// @param channel Int av 通道
  /// @param time String 时间，格式：2018-6-26-10-33-26
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setSystemTime"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSystemTime:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setSystemTime:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_time = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSystemTime:arg_time byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取系统时区
  /// @param channel Int av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getTimeZone"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTimeZone:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getTimeZone:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getTimeZone:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 IPC 的时区
  /// @param channel Int av 通道
  /// @param zone String GMT+08:00
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIpcTimeZone"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIpcTimeZone:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIpcTimeZone:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_zone = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setIpcTimeZone:arg_zone byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 检测是否有用户正在回放视频，系统限制，同时只能有一个用户在线观看
  /// @param channel Int av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.hasUserPlayingback"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasUserPlayingback:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(hasUserPlayingback:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api hasUserPlayingback:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置推送地址
  /// @param channel Int av通道
  /// @param url String 推送地址
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setPushUrl"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPushUrl:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setPushUrl:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSString *arg_url = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setPushUrl:arg_channel byChannel:arg_url error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 九安 推送地址
  /// @param channel Int av 通道
  /// @param url String 不带 s 的地址
  /// @param urls String 带 s 的地址
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setAndonPushUrl"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAndonPushUrl:urls:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setAndonPushUrl:urls:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_url = GetNullableObjectAtIndex(args, 0);
        NSString *arg_urls = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setAndonPushUrl:arg_url urls:arg_urls byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  ///  获取低功耗相机的电量
  ///  @param channel Int av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getPowerOfLowPowerCamera"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPowerOfLowPowerCamera:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getPowerOfLowPowerCamera:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getPowerOfLowPowerCamera:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  ///  设置云存储地址
  ///  @param channel Int 通道号
  ///  @param tokenUrl String 发送给设备，告知设备获取token的路径
  ///  @param postUrl String 发送给设备,告知设备文件在云端的存储路径
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setCloudStorageUrl"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCloudStorageUrlWithTokenUrl:postUrl:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setCloudStorageUrlWithTokenUrl:postUrl:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_tokenUrl = GetNullableObjectAtIndex(args, 0);
        NSString *arg_postUrl = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setCloudStorageUrlWithTokenUrl:arg_tokenUrl postUrl:arg_postUrl byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 关闭云存储
  /// @param channel Int av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.turnoffCloudService"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(turnoffCloudService:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(turnoffCloudService:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api turnoffCloudService:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取云存储状态
  /// @param channel Int av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getCloudStorageStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCloudStorageStatus:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getCloudStorageStatus:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getCloudStorageStatus:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置开通云存的摄像头
  /// @todo 确认参数，
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setCloudStorageChannel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCloudStorageChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setCloudStorageChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setCloudStorageChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取调试信息
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getDebugInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDebugInfo:)], @"ACCamCmd api (%@) doesn't respond to @selector(getDebugInfo:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getDebugInfo:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取低电量提醒配置信息
  /// @param channel 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getLowPowerNotificationConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLowPowerNotificationConfig:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getLowPowerNotificationConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getLowPowerNotificationConfig:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置低电量提醒级别和开关状态
  /// @param channel Int 通道号
  /// @param level Int 低电量级别，0: 低于10%；1：低于25%；2：低于50%；3：低于75%。4:close;
  /// @param on Boolean 低电量提醒开关, 0：关闭；1：开启
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setLowPowerNotificationLevel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLowPowerNotificationLevel:on:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setLowPowerNotificationLevel:on:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_level = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setLowPowerNotificationLevel:arg_level on:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置休眠事件的开关状态
  /// @param channel Int 通道号
  /// @param time Int 时长
  /// @param on Boolean 开关, 0：关闭；1：开启
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setSleepingTimeStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSleepingTime:status:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setSleepingTime:status:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_time = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setSleepingTime:arg_time status:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 pir 开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true: 打开 pir 提醒; false: 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setPirStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPirStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setPirStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setPirStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 mic 开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开 mic, false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setMicStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMicStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setMicStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setMicStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 led 开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开 mic, false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setLedStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLedStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setLedStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setLedStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 控制云台
  /// @param channel Int 通道号
  /// @param type Int 控制指令
  /// @param step Int 移动步长
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.controlPtz"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(controlPtzType:step:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(controlPtzType:step:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_type = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_step = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api controlPtzType:arg_type step:arg_step byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取 IPC 的调试信息
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getIpcDebugInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIpcDebugInfo:)], @"ACCamCmd api (%@) doesn't respond to @selector(getIpcDebugInfo:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getIpcDebugInfo:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取室内/室外场景模式； 0: 室外模式；1：室内模式
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getSceneMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSceneMode:)], @"ACCamCmd api (%@) doesn't respond to @selector(getSceneMode:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getSceneMode:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置室内/室外场景模式
  /// @param mode Int 0: 室外模式；1：室内模式
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setSceneMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSceneMode:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setSceneMode:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_mode = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSceneMode:arg_mode byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取云台巡航模式
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getPtzCruiseMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPtzCruiseMode:)], @"ACCamCmd api (%@) doesn't respond to @selector(getPtzCruiseMode:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getPtzCruiseMode:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置声光报警级别
  /// @param level SoundLightAlarmLevel 声光报警级别
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setSoundLightAlarmLevel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSoundLightAlarmLevel:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setSoundLightAlarmLevel:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_level = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setSoundLightAlarmLevel:arg_level byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 ipc 的声光报警级别
  /// @param level SoundLightAlarmLevel 声光报警级别
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIpcSoundLightAlarmLevel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIpcSoundLightAlarmLevel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIpcSoundLightAlarmLevel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_level = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setIpcSoundLightAlarmLevel:arg_level error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置手动报警的开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 开启手动报警，停止手动报警
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setManualAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setManualAlarmStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setManualAlarmStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setManualAlarmStatus:arg_channel byChannel:arg_on error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 IPC 手动报警的开关状态
  /// @param on Boolean true 开启手动报警，停止手动报警
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIpcManualAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIpcManualAlarmStatus:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIpcManualAlarmStatus:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setIpcManualAlarmStatus:arg_on error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置声音大小
  /// @param volume Int 大小 [-30 ~ 6]
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIpcAudioVolume"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIpcAudioVolume:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIpcAudioVolume:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_volume = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setIpcAudioVolume:arg_volume error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 pir 警示灯开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setPirLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPirLightStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setPirLightStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setPirLightStatus:arg_channel byChannel:arg_on error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置夜视灯模式
  /// @param mode Int  0-全彩，1-黑白，2-智能
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIpcNightLightMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIpcNightLightMode:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIpcNightLightMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setIpcNightLightMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置夜视灯模式
  /// @param channel Int 通道号
  /// @param mode Int  0-全彩，1-黑白，2-智能
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setNightLightMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNightLightMode:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setNightLightMode:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_mode = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setNightLightMode:arg_channel byChannel:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  ///  设置 IPC 报警类型
  /// @param type Int 0：人形检测； 1：移动侦测
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIpcAlarmType"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIpcAlarmType:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIpcAlarmType:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_type = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setIpcAlarmType:arg_type error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  ///  设置 IPC 报警类型
  /// @param channel Int 通道号
  /// @param type Int 0：人形检测； 1：移动侦测
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setAlarmType"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAlarmType:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setAlarmType:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_type = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setAlarmType:arg_type byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取报警配置信息
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getIpcAlarmConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIpcAlarmConfig:)], @"ACCamCmd api (%@) doesn't respond to @selector(getIpcAlarmConfig:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getIpcAlarmConfig:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取报警配置信息
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getAlarmConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAlarmConfigByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getAlarmConfigByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getAlarmConfigByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置移动侦测报警开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setMotionAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMotionAlarmStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setMotionAlarmStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setMotionAlarmStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取移动侦测、人形监测报警开关状态
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getMotionHumanoidStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMotionHumanoidStatusByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getMotionHumanoidStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getMotionHumanoidStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置人形监测报警开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setHumanoidAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setHumanoidAlarmStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setHumanoidAlarmStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setHumanoidAlarmStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置闪光灯开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setFlickerLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFlickerLightStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setFlickerLightStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setFlickerLightStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 IPC 闪光灯报警开关状态
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIpcFlickerLightAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIpcFlickerLightAlarmStatus:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIpcFlickerLightAlarmStatus:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setIpcFlickerLightAlarmStatus:arg_on error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置警示灯开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setWarningLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setWarningLightStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setWarningLightStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setWarningLightStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置红外人形监测的开关状态
  /// @param channel Int
  /// @param on Boolean
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setPirHumanoidStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPirHumanoidStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setPirHumanoidStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setPirHumanoidStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取电量信息
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getPowerInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPowerInfoByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getPowerInfoByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getPowerInfoByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取配置信息，包含录像时长、夜视模式、录像模式、是否有 sd 卡，人形红外开关，红外灵敏度等信息。
  /// 具体参照
  /// @param channel Int
  /// @see CameraSettingsInfo
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getSettingsInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsInfoChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getSettingsInfoChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getSettingsInfoChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取所有通道的连接状态
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getAllChannelsConnectStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllChannelsConnectStatus:)], @"ACCamCmd api (%@) doesn't respond to @selector(getAllChannelsConnectStatus:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getAllChannelsConnectStatus:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置低电量提醒通知开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开，false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setLowPowerNotificationStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLowPowerNotificationStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setLowPowerNotificationStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setLowPowerNotificationStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置时区时间
  /// @param zone ZoneId 时区id
  /// @param time Int 时间
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setZoneTime"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setZone:time:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setZone:time:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_zone = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_time = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setZone:arg_zone time:arg_time error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置夏令时
  /// @todo 确认请求参数和响应
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setDaylightSavingTime"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDaylightSavingTime:)], @"ACCamCmd api (%@) doesn't respond to @selector(setDaylightSavingTime:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api setDaylightSavingTime:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置时间系统
  /// @param system Int 时间系统， 1： 12小时制  2：24小时制
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setTimeSystem"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTimeSystem:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setTimeSystem:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_system = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setTimeSystem:arg_system error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取系统时间配置信息（夏令时、12/24小时制等）
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getTimeConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTimeConfig:)], @"ACCamCmd api (%@) doesn't respond to @selector(getTimeConfig:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getTimeConfig:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置通道名称
  /// @param channel Int 通道号
  /// @param name String 通道名； > 注意：设备端定义的是 36 个字节，但是传递31个以上的字节时，设备端会出现问题
  /// @todo 确认这里的 channel 是通道号还是 cameraIndex
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setChannelName"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setChannel:name:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setChannel:name:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSString *arg_name = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setChannel:arg_channel name:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取所有通道的名称
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getAllChannelsNames"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllChannelsNames:)], @"ACCamCmd api (%@) doesn't respond to @selector(getAllChannelsNames:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getAllChannelsNames:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置每周录制时段
  /// @param channel Int 通道
  /// @param hours Array<Array<Boolean>> 7 x 24 的二维数组，一周划分为7天, 每天 24 小时，录制为 true， 否则为 false
  /// @param type Int 0 常规录像 1移动侦测录像 2智能报警录像
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setRecordingHours"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRecordingHours:type:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setRecordingHours:type:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSArray<NSArray<NSNumber *> *> *arg_hours = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_type = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setRecordingHours:arg_channel type:arg_hours byChannel:arg_type error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取每周的录制时段
  /// @param channel Int 通道号
  /// @param type Int 0 常规录像 1移动侦测录像 2智能报警录像
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getRecordingHours"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getRecordingHoursBytype:channel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getRecordingHoursBytype:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_type = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api getRecordingHoursBytype:arg_channel channel:arg_type error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取单个摄像机名称
  /// @param channel av通道
  /// @param cameraIndex 摄相机编号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getCameraName"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getChannelNameWithCameraIndex:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getChannelNameWithCameraIndex:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_cameraIndex = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api getChannelNameWithCameraIndex:arg_cameraIndex byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置指示灯开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setIndicatorLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIndicatorLightStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setIndicatorLightStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setIndicatorLightStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取指示灯开关状态
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getIndicatorLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIndicatorLightStatusByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getIndicatorLightStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getIndicatorLightStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取网络指示灯状态
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getNetworkLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNetworkLightStatusByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getNetworkLightStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getNetworkLightStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置网络指示灯状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setNetworkLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNetworkLightStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setNetworkLightStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setNetworkLightStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置个性化语音开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true 打开， false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setCustomVoiceStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCustomVoiceStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setCustomVoiceStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setCustomVoiceStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置化语音
  /// @param channel Int 通道号
  /// @param voiceUrl String 个性化语音下载地址
  /// @param index Int 语音索引号（暂时不知道是什么作用）
  /// @param entering Boolean true 进入特定区域播放的语音，false 离开特定区域播放的语音
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setCustomVoice"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCustomVoiceUrl:atIndex:forEntering:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setCustomVoiceUrl:atIndex:forEntering:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_voiceUrl = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_index = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_entering = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api setCustomVoiceUrl:arg_voiceUrl atIndex:arg_index forEntering:arg_entering byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置一周监控时段开关状态
  /// @param channel Int 通道号
  /// @param start DateTime 监控开始时间
  /// @param end DateTime 监控结束时间
  /// @param onWeekDays List<bool> 7 个 布尔值数组，代表一周内七天监控时段开关状态
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setWeekMonitoringSchedule"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setWeekMonitoringSchedule:from:to:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setWeekMonitoringSchedule:from:to:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSNumber *> *arg_schedule = GetNullableObjectAtIndex(args, 0);
        ACDateTime *arg_start = GetNullableObjectAtIndex(args, 1);
        ACDateTime *arg_end = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api setWeekMonitoringSchedule:arg_schedule from:arg_start to:arg_end byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取人形检测开关状态
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getHumanoidDetectStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHumanoidDetectStatusByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getHumanoidDetectStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getHumanoidDetectStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置人形检测开关状态
  /// @param channel Int 通道号
  /// @param on Boolean true打开，false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setHumanoidDetectStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setHumanoidDetectStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setHumanoidDetectStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setHumanoidDetectStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取一个月内指定时间段内有录制文件的日期列表
  /// @param channel Int 通道
  /// @param startTime DateTime 开始时间
  /// @param endTime DateTime 结束时间
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getDaysHasRecordingFiles"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDaysHasRecordingFilesFrom:to:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getDaysHasRecordingFilesFrom:to:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ACDateTime *arg_startTime = GetNullableObjectAtIndex(args, 0);
        ACDateTime *arg_endTime = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api getDaysHasRecordingFilesFrom:arg_startTime to:arg_endTime byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取所有支持的报警类型
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getSupportedAlarmTypes"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSupportedAlarmTypesByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getSupportedAlarmTypesByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getSupportedAlarmTypesByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置录制视频质量
  /// @param quality Int 0：为高清，1：为流畅
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setRecordingVideoQuality"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRecordingVideoQuality:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setRecordingVideoQuality:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_quality = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setRecordingVideoQuality:arg_quality error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置隐私遮挡区域及开关状态
  /// @param channel Int 通道号
  /// @param areas Array<PrivacyOcclusionArea> 隐私遮挡区域，最多 5 个
  /// @param on Boolean true 开启隐私遮挡功能，false 关闭
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setPrivacyOcclusion"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPrivacyOcclusionAreas:status:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setPrivacyOcclusionAreas:status:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<PrivacyOcclusionArea *> *arg_areas = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setPrivacyOcclusionAreas:arg_areas status:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取隐私遮挡区域及开关状态
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getPrivacyOcclusion"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPrivacyOcclusionByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getPrivacyOcclusionByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getPrivacyOcclusionByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置算法开关状态
  /// @param channel Int 通道号
  /// @param on Array<Boolean> 6个元素的数组，依次为  移动侦测 、人形、车型 、人脸 、宠物 、异响 的开关状态， true 开启
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setAlgorithmsStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAlgorithmsStatus:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setAlgorithmsStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSNumber *> *arg_on = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setAlgorithmsStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取算法开关状态
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getAlgorithmsStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAlgorithmsStatusByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getAlgorithmsStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getAlgorithmsStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置算法区域
  /// @param channel Int 通道号
  /// @param area Area 区域
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setAlgorithmArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAlgorithmArea:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setAlgorithmArea:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        Area *arg_area = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setAlgorithmArea:arg_area byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取算法区域
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getAlgorithmArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAlgorithmAreaByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getAlgorithmAreaByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getAlgorithmAreaByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置异响分贝级别，达到该分贝级别，触发异响报警
  /// @param channel Int 通道号
  /// @param decibel Int 分贝值 1: low;  2:medium; 3: high
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.setAbnormalDecibel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAbnormalDecibel:byChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(setAbnormalDecibel:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_decibel = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setAbnormalDecibel:arg_decibel byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取异响分贝级别
  /// @param channel Int 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmd.getAbnormalDecibel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAbnormalDecibelByChannel:error:)], @"ACCamCmd api (%@) doesn't respond to @selector(getAbnormalDecibelByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api getAbnormalDecibelByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ACCamCmdRespCodecReader : FlutterStandardReader
@end
@implementation ACCamCmdRespCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [AIAlgorithmArea fromList:[self readValue]];
    case 129: 
      return [AIAlgorithmStatus fromList:[self readValue]];
    case 130: 
      return [CameraName fromList:[self readValue]];
    case 131: 
      return [Event fromList:[self readValue]];
    case 132: 
      return [GetEventsResponse fromList:[self readValue]];
    case 133: 
      return [GetTimeConfigResp fromList:[self readValue]];
    case 134: 
      return [GetVRAlarmConfigResp fromList:[self readValue]];
    case 135: 
      return [IPCAlarmConfig fromList:[self readValue]];
    case 136: 
      return [LowPowerNotificationConfig fromList:[self readValue]];
    case 137: 
      return [MotionDetectArea fromList:[self readValue]];
    case 138: 
      return [PowerInfo fromList:[self readValue]];
    case 139: 
      return [PrivacyOcclusionArea fromList:[self readValue]];
    case 140: 
      return [SettingsInfo fromList:[self readValue]];
    case 141: 
      return [SupportedAlarmType fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ACCamCmdRespCodecWriter : FlutterStandardWriter
@end
@implementation ACCamCmdRespCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AIAlgorithmArea class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AIAlgorithmStatus class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CameraName class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Event class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[GetEventsResponse class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[GetTimeConfigResp class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[GetVRAlarmConfigResp class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[IPCAlarmConfig class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LowPowerNotificationConfig class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MotionDetectArea class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PowerInfo class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PrivacyOcclusionArea class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SettingsInfo class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SupportedAlarmType class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ACCamCmdRespCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ACCamCmdRespCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ACCamCmdRespCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ACCamCmdRespCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ACCamCmdRespGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ACCamCmdRespCodecReaderWriter *readerWriter = [[ACCamCmdRespCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ACCamCmdRespSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACCamCmdResp> *api) {
  /// 设置移动侦测区域响应
  /// @param uid String 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetMotionDetectArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetMotionDetectAreaByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetMotionDetectAreaByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetMotionDetectAreaByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取移动侦测区域响应
  /// @param uid String 设备 uid
  /// @param area 侦测区域
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetMotionDetectArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetMotionDetectArea:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetMotionDetectArea:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        MotionDetectArea *arg_area = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetMotionDetectArea:arg_area byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取设备系统时间响应
  /// @param uid 设备 uid
  /// @param time 设备系统时间
  /// @param success true 获取成功， false 获取失败
  /// @param channel av 通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetSystemTime"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetSystemTime:success:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetSystemTime:success:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSString *arg_time = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api camera:arg_uid didGetSystemTime:arg_time success:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置设备时间系统响应
  /// @param uid: 设备
  /// @param success: true 设置成功， false 设置失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetSystemTimeSuccess"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetSystemTimeSuccess:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetSystemTimeSuccess:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetSystemTimeSuccess:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取设备时区响应
  /// @param uid 设备 uid
  /// @param zone 时区
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetTimeZone"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetTimeZone:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetTimeZone:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_zone = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetTimeZone:arg_zone byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置时区响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetTimeZone"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetTimeZoneByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetTimeZoneByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetTimeZoneByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 查询是否有用户正在回放
  /// @param uid 设备 uid
  /// @param playingBack true 有人正在回放，false 没有人正在回放。
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraHasUserPlayingback"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:hasUserPlayingback:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:hasUserPlayingback:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_playingBack = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid hasUserPlayingback:arg_playingBack byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置推送地址响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetPushUrl"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetPushUrlByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetPushUrlByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetPushUrlByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取低功耗设备电量响应
  /// @param uid 设备 uid
  /// @param powers: 16 个通道的电量信息，数组中的每一个元素代表一个通道的电量信息
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetPowerOfLowPowerCamera"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetPowerOfLowPowerCamera:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetPowerOfLowPowerCamera:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_powers = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetPowerOfLowPowerCamera:arg_powers byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置云存储地址响应
  /// @param uid 设备 uid
  /// @param isCloudStorageOn: true 已启用云存储，false 已关闭云存储
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetCloudStorageUrl"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetCloudStorageUrl:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetCloudStorageUrl:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_isCloudStorageOn = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didSetCloudStorageUrl:arg_isCloudStorageOn byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 关闭云存储响应
  /// @param uid 设备 uid
  /// @param isCloudStorageOn: true 已启用云存储，false 已关闭云存储
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidTurnOffCloudStorage"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didTurnOffCloudStorage:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didTurnOffCloudStorage:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_isCloudStorageOn = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didTurnOffCloudStorage:arg_isCloudStorageOn byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取云存储状态响应
  /// @param uid 设备 uid
  /// @param isCloudStorageOn: true 已启用云存储，false 已关闭云存储
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetCloudStorageStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetCloudStorageStatus:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetCloudStorageStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_isCloudStorageOn = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetCloudStorageStatus:arg_isCloudStorageOn byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取调试信息响应
  /// @todo 待确认
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetDebugInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cameraDidGetDebugInfoWithError:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(cameraDidGetDebugInfoWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api cameraDidGetDebugInfoWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取低功耗设备配置信息响应
  /// @param uid 设备 uid
  /// @param config 配置信息
  /// @param success true 获取成功，false 获取失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetLowPowerNotificationConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetLowPowerNotificationConfig:success:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetLowPowerNotificationConfig:success:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        LowPowerNotificationConfig *arg_config = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api camera:arg_uid didGetLowPowerNotificationConfig:arg_config success:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置低电量通知提醒级别响应
  /// @param uid 设备 uid
  /// @param success true 成功，false 失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetLowPowerNotificationLevel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetLowPowerNotificationLevelSuccess:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetLowPowerNotificationLevelSuccess:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didSetLowPowerNotificationLevelSuccess:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置休眠时间响应
  /// @param uid 设备 uid
  /// @param success true 成功，false 失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetSleepingTimeSuccess"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetSleepingTimeStatusSuccess:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetSleepingTimeStatusSuccess:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didSetSleepingTimeStatusSuccess:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 Pir 开关响应
  /// @param uid 设备 uid
  /// @param success true 成功，false 失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetPirStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetPirStatusSuccess:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetPirStatusSuccess:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didSetPirStatusSuccess:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 mic 开关响应
  /// @param uid 设备 uid
  /// @param success true 成功，false 失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetMicStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetMicStatusSuccess:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetMicStatusSuccess:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didSetMicStatusSuccess:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 led 开关响应
  /// @param uid 设备 uid
  /// @param success true 成功，false 失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetLedStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetLedStatusSuccess:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetLedStatusSuccess:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didSetLedStatusSuccess:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 控制云台响应
  /// @param uid 设备 uid
  /// @param command 云台指令码
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidControlPzt"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didControlPztWithCommand:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didControlPztWithCommand:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_command = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didControlPztWithCommand:arg_command byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// @todo 需要补充
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetIpcDebugInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cameraDidGetIpcDebugInfoWithError:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(cameraDidGetIpcDebugInfoWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api cameraDidGetIpcDebugInfoWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  ///  获取场景模式响应
  /// @param uid 设备 uid
  /// @param mode 环境模式，0: 室外模式；1：室内模式
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetSceneMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetSceneMode:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetSceneMode:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_mode = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetSceneMode:arg_mode byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置场景模式响应
  /// @param uid 设备 uid
  /// @param success true 成功， false 失败
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetSceneMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetSceneModeSuccess:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetSceneModeSuccess:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_success = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didSetSceneModeSuccess:arg_success byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取云台巡航模式响应
  /// @param uid 设备 uid
  /// @param mode  1：自动巡航, 2：预设点巡航
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetPtzCruiseMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetPtzCruiseMode:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetPtzCruiseMode:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_mode = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetPtzCruiseMode:arg_mode byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置声光警报级别响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetSoundLightAlarmLevel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetSoundLightAlarmLevelByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetSoundLightAlarmLevelByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetSoundLightAlarmLevelByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置手动报警开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetManualAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetManualAlarmStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetManualAlarmStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetManualAlarmStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置声音响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetAudioVolume"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetAudioVolumeByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetAudioVolumeByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetAudioVolumeByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置 pir 灯 响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetPirLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetPirLightStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetPirLightStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetPirLightStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置夜视灯光模式响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetNightLightMode"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetNightLightModeByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetNightLightModeByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetNightLightModeByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置报警类型（人形 / 移动）响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetAlarmType"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetAlarmTypeByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetAlarmTypeByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetAlarmTypeByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// IPC 获取报警配置信息响应
  /// @param uid 设备 uid
  /// @param config 配置信息
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetIpcAlarmConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetIpcAlarmConfig:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetIpcAlarmConfig:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        IPCAlarmConfig *arg_conifg = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetIpcAlarmConfig:arg_conifg byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// (视频录像机)获取报警配置信息响应
  /// @param uid 设备 uid
  /// @param config 配置信息
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetAlarmConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetAlarmConfig:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetAlarmConfig:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        GetVRAlarmConfigResp *arg_conifg = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetAlarmConfig:arg_conifg byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置移动侦测报警开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetMotionAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetMotionAlarmStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetMotionAlarmStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetMotionAlarmStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取移动侦测、人形侦测报警开关状态响应
  /// @param uid 设备 uid
  /// @param isMotionOn true 移动侦测报警打开，否则关闭
  /// @param isHumanoidOn true 人形侦测报警打开，否则关闭
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetMotionHumanoidStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetMotionStatus:humanoidStatus:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetMotionStatus:humanoidStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_isMotionOn = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_isHumanoidOn = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api camera:arg_uid didGetMotionStatus:arg_isMotionOn humanoidStatus:arg_isHumanoidOn byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置人形侦测报警开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetHunmanoidAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetHunmanoidAlarmStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetHunmanoidAlarmStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetHunmanoidAlarmStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置闪关灯报警开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetIpcFlickerLightAlarmStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetIpcFlickerLightAlarmStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetIpcFlickerLightAlarmStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetIpcFlickerLightAlarmStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置警示灯开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetWarningLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetWarningLightStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetWarningLightStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetWarningLightStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置红外人形检测开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetPirHumanoidStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetPirHumanoidStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetPirHumanoidStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetPirHumanoidStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// @todo 待补充
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetPowerInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cameraDidGetPowerInfoUid:info:channel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(cameraDidGetPowerInfoUid:info:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        PowerInfo *arg_info = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api cameraDidGetPowerInfoUid:arg_uid info:arg_info channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetSettingsInfo"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cameraDidGetSettingsInfoUid:info:channel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(cameraDidGetSettingsInfoUid:info:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        SettingsInfo *arg_info = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api cameraDidGetSettingsInfoUid:arg_uid info:arg_info channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetAllChannelsConnectStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(cameraDidGetAllChannelsConnectStatusUid:channel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(cameraDidGetAllChannelsConnectStatusUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api cameraDidGetAllChannelsConnectStatusUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置低电量开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetLowPowerNotificationStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetLowPowerNotificationStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetLowPowerNotificationStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetLowPowerNotificationStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置时区时间响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetZoneTime"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didZoneTimeByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didZoneTimeByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didZoneTimeByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置夏令时响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetDayLightSavingTime"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetDayLightSavingTimeByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetDayLightSavingTimeByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetDayLightSavingTimeByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置时间系统回调 12 / 24 小时制 响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetTimeSystem"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetTimeSystemByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetTimeSystemByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetTimeSystemByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取时间相关的配置信息响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetTimeConfig"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetTimeConfig:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetTimeConfig:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        GetTimeConfigResp *arg_config = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetTimeConfig:arg_config byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置通道名称响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetChannelName"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetChannelNameByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetChannelNameByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetChannelNameByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取到所有通道的名称
  /// @param uid 设备 uid
  /// @param names  相机名称列表
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetAllChannelNames"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetAllChannelNames:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetAllChannelNames:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSArray<CameraName *> *arg_names = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetAllChannelNames:arg_names byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置每周录制时段响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetRecordingHours"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:setRecordingHoursByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:setRecordingHoursByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid setRecordingHoursByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取每周录制时段响应
  /// @param uid 设备 uid
  /// @param hours 表示一周划分为 7 * 24 的时段，元素为 true 时，表示该时段录制，否则不录制
  /// @param type 录像类型，0 常规录像 1移动侦测录像 2智能报警录像
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetRecordingHours"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetRecordingHours:byType:channel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetRecordingHours:byType:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSArray<NSArray<NSNumber *> *> *arg_hours = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_type = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api camera:arg_uid didGetRecordingHours:arg_hours byType:arg_type channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取摄像头名称响应
  /// @param uid 设备 uid
  /// @param 摄像机名称
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetCameraName"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetCameraName:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetCameraName:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        CameraName *arg_name = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetCameraName:arg_name byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置指示灯开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetIndicatorLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetIndicatorLightStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetIndicatorLightStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetIndicatorLightStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取指示灯开关状态响应
  /// @param uid 设备 uid
  /// @param on true 打开，false 关闭
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetIndicatorLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetIndicatorLightStatus:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetIndicatorLightStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetIndicatorLightStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置网络指示灯开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetNetworkLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetNetworkLightStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetNetworkLightStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetNetworkLightStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取网络指示灯开关状态响应
  /// @param uid 设备 uid
  /// @param on true 打开，false 关闭
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetNetworkLightStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetNetworkLightStatus:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetNetworkLightStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetNetworkLightStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置个性化语音开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetCustomVoiceStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetCustomVoiceStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetCustomVoiceStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetCustomVoiceStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置个性化语音响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetCustomVoice"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetCustomVoiceByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetCustomVoiceByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetCustomVoiceByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置一周监控时段开关状态响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetWeekMonitoringSchedule"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetWeekMonitoringScheduleByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetWeekMonitoringScheduleByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetWeekMonitoringScheduleByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取人形检测开关响应
  /// @param uid 设备 uid
  /// @param on true 打开，false 关闭
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetHumanoidDetectStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetHumanoidDetectStatus:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetHumanoidDetectStatus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_on = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetHumanoidDetectStatus:arg_on byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置人形检测开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetHumanoidDetectStatus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetHumanoidDetectStatusByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetHumanoidDetectStatusByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetHumanoidDetectStatusByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取一个月内指定时间段有录制文件的日期列表响应
  /// 设置人形检测开关响应
  /// @param uid 设备 uid
  /// @param days 有录制文件的日期列表
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetDaysHasRecordingFiles"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetDaysHasRecordingFiles:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetDaysHasRecordingFiles:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_days = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetDaysHasRecordingFiles:arg_days byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取支持的检测类型响应
  /// @param uid 设备 uid
  /// @param types 支持的类型
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetSupportedAlarmType"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetSupportedAlarmType:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetSupportedAlarmType:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        SupportedAlarmType *arg_types = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetSupportedAlarmType:arg_types byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取指定事件段内的事件列表的响应
  /// @param uid 设备 uid
  /// @param resp 事件列表
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetEvents"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:DidGetEvents:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:DidGetEvents:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        GetEventsResponse *arg_resp = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid DidGetEvents:arg_resp byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置录像分辨率响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetRecordingResolution"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetRecordingResolutionByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetRecordingResolutionByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetRecordingResolutionByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置隐私遮挡响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetPrivacyOcclusion"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetPrivacyOcclusionByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetPrivacyOcclusionByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetPrivacyOcclusionByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取隐私遮挡区域响应
  /// @param uid 设备 uid
  /// @param area 遮挡区域
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetPrivacyOcclusion"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetPrivacyOcclusion:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetPrivacyOcclusion:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        PrivacyOcclusionArea *arg_area = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetPrivacyOcclusion:arg_area byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置算法开关响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetAlgorithmStaus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetAlgorithmStausByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetAlgorithmStausByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetAlgorithmStausByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取算法开关响应
  /// @param uid 设备 uid
  /// @param status 算法开关状态
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetAlgorithmStaus"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetAlgorithmStaus:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetAlgorithmStaus:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        AIAlgorithmStatus *arg_status = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetAlgorithmStaus:arg_status byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置算法区域响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetAlgorithmArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetAlgorithmAreaByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetAlgorithmAreaByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetAlgorithmAreaByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取算法区域响应
  /// @param uid 设备 uid
  /// @param area 算法区域
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetAlgorithmArea"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetAlgorithmArea:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetAlgorithmArea:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        AIAlgorithmArea *arg_area = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetAlgorithmArea:arg_area byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置异响级别响应
  /// @param uid 设备 uid
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidSetAbnormalDecibel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didSetAbnormalDecibelByChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didSetAbnormalDecibelByChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api camera:arg_uid didSetAbnormalDecibelByChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取异响级别响应
  /// @param uid 设备 uid
  /// @param decibel 异响级别 1: low;  2:medium; 3: high
  /// @param channel av通道
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ACCamCmdResp.cameraDidGetAbnormalDecibel"
        binaryMessenger:binaryMessenger
        codec:ACCamCmdRespGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(camera:didGetAbnormalDecibel:byChannel:error:)], @"ACCamCmdResp api (%@) doesn't respond to @selector(camera:didGetAbnormalDecibel:byChannel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_decibel = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api camera:arg_uid didGetAbnormalDecibel:arg_decibel byChannel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface CameraMessageCodecReader : FlutterStandardReader
@end
@implementation CameraMessageCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [CameraCommand fromList:[self readValue]];
    case 129: 
      return [CameraInfo fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface CameraMessageCodecWriter : FlutterStandardWriter
@end
@implementation CameraMessageCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[CameraCommand class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CameraInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface CameraMessageCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation CameraMessageCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[CameraMessageCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[CameraMessageCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *CameraMessageGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    CameraMessageCodecReaderWriter *readerWriter = [[CameraMessageCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void CameraMessageSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraMessage> *api) {
  /// 创建相机
  /// [cameraInfo]  相机信息
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.createCamera"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createCamera:error:)], @"CameraMessage api (%@) doesn't respond to @selector(createCamera:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CameraInfo *arg_cameraInfo = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api createCamera:arg_cameraInfo error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 连接相机
  /// [cameraInfo]  相机信息
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.connectCamera"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectCamera:error:)], @"CameraMessage api (%@) doesn't respond to @selector(connectCamera:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api connectCamera:arg_uid error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 连接相机通道
  ///
  /// - [uid] 相机 uid
  /// - [channel] 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.connectChannel"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectChannelWithUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(connectChannelWithUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api connectChannelWithUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 断开相机连接
  /// - [uid]  相机 uid
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.disconnectCamera"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectCamera:error:)], @"CameraMessage api (%@) doesn't respond to @selector(disconnectCamera:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disconnectCamera:arg_uid error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 断开通道连接
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.disconnectChannel"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectChannelUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(disconnectChannelUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api disconnectChannelUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 指定相机通道 [channelId] 回传的视频画面渲染到播放器 [monitorId] 上
  ///
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.attachToMonitor"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(attachToMonitorMonitorId:uid:channelId:error:)], @"CameraMessage api (%@) doesn't respond to @selector(attachToMonitorMonitorId:uid:channelId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_monitorId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_uid = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_channelId = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api attachToMonitorMonitorId:arg_monitorId uid:arg_uid channelId:arg_channelId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 相机解除播放器绑定关系
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.detachMonitor"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(detachMonitorMonitorId:uid:error:)], @"CameraMessage api (%@) doesn't respond to @selector(detachMonitorMonitorId:uid:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_monitorId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_uid = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api detachMonitorMonitorId:arg_monitorId uid:arg_uid error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 请求开始出图
  /// - [uid] 相机uid
  /// - [channel] 通道号
  /// - [isSoftwareDecode] 是否使用软解
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.startReceiveingVideoFrames"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startReceiveingVideoFramesUid:channel:isSoftwareDecode:error:)], @"CameraMessage api (%@) doesn't respond to @selector(startReceiveingVideoFramesUid:channel:isSoftwareDecode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_isSoftwareDecode = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api startReceiveingVideoFramesUid:arg_uid channel:arg_channel isSoftwareDecode:arg_isSoftwareDecode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止出图
  /// - [uid] 相机 uid
  /// - [channel] 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.stopReceivingVideoFrame"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopReceivingVideoFrameUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(stopReceivingVideoFrameUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api stopReceivingVideoFrameUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 向相机发送指令
  ///
  /// - [uid] 相机 uid
  /// - [command] 指令信息
  /// @see CameraCommand
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.sendCommand"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendCommandUid:command:error:)], @"CameraMessage api (%@) doesn't respond to @selector(sendCommandUid:command:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        CameraCommand *arg_command = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api sendCommandUid:arg_uid command:arg_command error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 对讲音频格式设置
  /// - [uid] 相机 uid
  /// - [channel] 通道号
  /// - [audioFormat] 音频格式 (目前的格式：318)
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.setAudioInputCodecId"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAudioInputCodecIdUid:channel:audioFormat:error:)], @"CameraMessage api (%@) doesn't respond to @selector(setAudioInputCodecIdUid:channel:audioFormat:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_audioFormat = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setAudioInputCodecIdUid:arg_uid channel:arg_channel audioFormat:arg_audioFormat error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 开始向相机发送音频，内部会进行音频的采集、编码、发送
  /// - [uid] 相机 uid
  /// - [channel] 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.startSendingSoundToCamera"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startSendingSoundToCameraUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(startSendingSoundToCameraUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api startSendingSoundToCameraUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止音频采集、编码、发送
  ///
  /// - [uid] 相机 uid
  /// - [channel] 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.stopSendingSoundToCamera"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopSendingSoundToCameraUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(stopSendingSoundToCameraUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api stopSendingSoundToCameraUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 开始接收Device端的音频数据，内部会进行音频的接收、解码、播放
  ///
  /// - [uid] 设备 uid
  /// - [channel] 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.startReceivingSoundFormCamera"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startReceivingSoundFormCameraUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(startReceivingSoundFormCameraUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api startReceivingSoundFormCameraUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止音频接收、解码、播放
  /// - [uid] 设备 uid
  /// - [channel] 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.stopReceivingSoundFormCamera"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopReceivingSoundFormCameraUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(stopReceivingSoundFormCameraUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api stopReceivingSoundFormCameraUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 设置音频播放模式
  ///
  /// - mode 0 外放模式，1 听筒模式(耳机模式)
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.setAudioPlayMode"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAudioPlayModeUid:mode:error:)], @"CameraMessage api (%@) doesn't respond to @selector(setAudioPlayModeUid:mode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_mode = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setAudioPlayModeUid:arg_uid mode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 直播截图
  ///
  /// - [uid] 相机id
  /// - [channel] 通道号
  /// - [targetUrl] 截图保存路径
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.takeASnapShot"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(takeASnapShotUid:channel:targetUrl:error:)], @"CameraMessage api (%@) doesn't respond to @selector(takeASnapShotUid:channel:targetUrl:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        NSString *arg_targetUrl = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        NSNumber *output = [api takeASnapShotUid:arg_uid channel:arg_channel targetUrl:arg_targetUrl error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 录制视频
  ///
  /// - [uid] 相机id
  /// - [channel] 通道号
  /// - [targetUrl] 录制的视频保存位置
  /// - [durationMs] 最大录制时长，单位为 毫秒
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.startRecording"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startRecordingUid:channel:targetUrl:durationMs:error:)], @"CameraMessage api (%@) doesn't respond to @selector(startRecordingUid:channel:targetUrl:durationMs:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        NSString *arg_targetUrl = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_durationMs = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        NSNumber *output = [api startRecordingUid:arg_uid channel:arg_channel targetUrl:arg_targetUrl durationMs:arg_durationMs error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止录制视频
  /// - [uid] 相机id
  /// - [channel] 通道号
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.stopRecording"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopRecordingUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(stopRecordingUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api stopRecordingUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 获取当前音频播放模式
  ///
  /// @return 0 外放模式，1 听筒模式(耳机模式)
  /// 判断与相机是否已经建立连线
  ///
  /// @return 是否连线
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.isCameraConnected"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isCameraConnectedUid:error:)], @"CameraMessage api (%@) doesn't respond to @selector(isCameraConnectedUid:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api isCameraConnectedUid:arg_uid error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 判断与相机通道是否已经建立连接
  ///
  /// @return 是否连线
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CameraMessage.isChannelConnected"
        binaryMessenger:binaryMessenger
        codec:CameraMessageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isChannelConnectedUid:channel:error:)], @"CameraMessage api (%@) doesn't respond to @selector(isChannelConnectedUid:channel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uid = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_channel = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api isChannelConnectedUid:arg_uid channel:arg_channel error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
